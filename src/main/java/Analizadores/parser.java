
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import UsuarioIndigo.*;
import FormSolicitudIndigo.*;
import ComponentesIndigo.*;
import GestorIndigo.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\010\000\002\004\012\000\002\004\011" +
    "\000\002\006\006\000\002\055\002\000\002\005\015\000" +
    "\002\005\014\000\002\005\014\000\002\005\014\000\002" +
    "\005\014\000\002\005\014\000\002\005\014\000\002\005" +
    "\014\000\002\005\014\000\002\005\014\000\002\012\005" +
    "\000\002\012\003\000\002\010\006\000\002\010\004\000" +
    "\002\011\011\000\002\011\011\000\002\011\011\000\002" +
    "\013\005\000\002\013\003\000\002\024\006\000\002\047" +
    "\005\000\002\047\004\000\002\025\011\000\002\025\011" +
    "\000\002\025\011\000\002\025\011\000\002\014\005\000" +
    "\002\014\003\000\002\026\006\000\002\026\004\000\002" +
    "\027\011\000\002\027\011\000\002\015\005\000\002\015" +
    "\003\000\002\035\006\000\002\050\005\000\002\050\004" +
    "\000\002\036\011\000\002\036\011\000\002\036\011\000" +
    "\002\036\011\000\002\036\011\000\002\036\011\000\002" +
    "\016\005\000\002\016\003\000\002\041\006\000\002\051" +
    "\005\000\002\051\004\000\002\042\011\000\002\042\011" +
    "\000\002\042\011\000\002\042\011\000\002\020\005\000" +
    "\002\020\003\000\002\037\013\000\002\021\005\000\002" +
    "\021\003\000\002\040\013\000\002\022\005\000\002\022" +
    "\003\000\002\030\023\000\002\030\023\000\002\023\005" +
    "\000\002\023\003\000\002\031\006\000\002\052\005\000" +
    "\002\052\004\000\002\032\011\000\002\032\011\000\002" +
    "\032\011\000\002\032\011\000\002\032\011\000\002\032" +
    "\011\000\002\032\011\000\002\032\011\000\002\032\011" +
    "\000\002\032\011\000\002\032\011\000\002\032\011\000" +
    "\002\017\005\000\002\017\003\000\002\044\006\000\002" +
    "\053\005\000\002\053\004\000\002\045\011\000\002\045" +
    "\011\000\002\045\011\000\002\045\011\000\002\045\011" +
    "\000\002\045\011\000\002\045\011\000\002\045\011\000" +
    "\002\045\011\000\002\045\011\000\002\045\011\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\043\003\000\002\043\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\007\010\000\002\054\003\000\002\054\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0222\000\004\004\007\001\002\000\004\002\000\001" +
    "\002\000\004\002\u0224\001\002\000\006\002\uffff\004\u0222" +
    "\001\002\000\004\006\u021f\001\002\000\004\004\012\001" +
    "\002\000\004\004\u0216\001\002\000\004\006\013\001\002" +
    "\000\004\011\014\001\002\000\004\022\015\001\002\000" +
    "\004\024\016\001\002\000\026\026\ufffa\031\027\035\031" +
    "\036\025\043\023\052\022\053\026\062\017\063\021\064" +
    "\030\001\002\000\004\024\u01bf\001\002\000\004\016\u01b9" +
    "\001\002\000\004\024\u018c\001\002\000\004\024\u0177\001" +
    "\002\000\004\024\u013e\001\002\000\004\026\u0118\001\002" +
    "\000\004\024\371\001\002\000\004\024\311\001\002\000" +
    "\004\024\234\001\002\000\004\024\057\001\002\000\004" +
    "\024\032\001\002\000\004\005\033\001\002\000\004\017" +
    "\034\001\002\000\004\024\035\001\002\000\004\025\036" +
    "\001\002\000\004\024\037\001\002\000\004\022\040\001" +
    "\002\000\004\015\041\001\002\000\004\017\042\001\002" +
    "\000\004\024\047\001\002\000\004\016\ufff7\001\002\000" +
    "\006\016\uffc4\023\045\001\002\000\004\017\042\001\002" +
    "\000\004\016\uffc5\001\002\000\004\027\050\001\002\000" +
    "\004\024\051\001\002\000\004\022\052\001\002\000\004" +
    "\024\053\001\002\000\004\117\054\001\002\000\004\024" +
    "\055\001\002\000\004\020\056\001\002\000\006\016\uffc3" +
    "\023\uffc3\001\002\000\004\005\060\001\002\000\004\017" +
    "\061\001\002\000\004\024\062\001\002\000\004\061\063" +
    "\001\002\000\004\024\064\001\002\000\004\022\065\001" +
    "\002\000\004\015\066\001\002\000\004\017\070\001\002" +
    "\000\006\016\uffba\023\232\001\002\000\004\024\073\001" +
    "\002\000\004\016\ufff0\001\002\000\004\023\224\001\002" +
    "\000\032\044\104\065\100\066\075\067\105\100\106\101" +
    "\076\102\102\107\101\112\103\113\077\114\107\115\074" +
    "\001\002\000\004\024\217\001\002\000\004\024\212\001" +
    "\002\000\004\024\205\001\002\000\004\024\200\001\002" +
    "\000\004\024\173\001\002\000\004\024\164\001\002\000" +
    "\004\024\153\001\002\000\004\024\144\001\002\000\004" +
    "\024\137\001\002\000\004\024\122\001\002\000\004\024" +
    "\115\001\002\000\004\024\110\001\002\000\004\022\111" +
    "\001\002\000\004\024\112\001\002\000\004\060\113\001" +
    "\002\000\004\024\114\001\002\000\006\020\uffac\023\uffac" +
    "\001\002\000\004\022\116\001\002\000\004\024\117\001" +
    "\002\000\004\060\120\001\002\000\004\024\121\001\002" +
    "\000\006\020\uffb0\023\uffb0\001\002\000\004\022\123\001" +
    "\002\000\004\024\124\001\002\000\022\070\134\071\130" +
    "\072\127\073\132\074\133\075\126\076\135\077\125\001" +
    "\002\000\004\024\uff93\001\002\000\004\024\uff95\001\002" +
    "\000\004\024\uff98\001\002\000\004\024\uff99\001\002\000" +
    "\004\024\136\001\002\000\004\024\uff97\001\002\000\004" +
    "\024\uff96\001\002\000\004\024\uff9a\001\002\000\004\024" +
    "\uff94\001\002\000\006\020\uffb3\023\uffb3\001\002\000\004" +
    "\022\140\001\002\000\004\024\141\001\002\000\004\057" +
    "\142\001\002\000\004\024\143\001\002\000\006\020\uffb6" +
    "\023\uffb6\001\002\000\004\022\145\001\002\000\004\024" +
    "\146\001\002\000\006\041\147\117\150\001\002\000\004" +
    "\024\uff88\001\002\000\004\024\uff87\001\002\000\004\024" +
    "\152\001\002\000\006\020\uffae\023\uffae\001\002\000\004" +
    "\022\154\001\002\000\004\024\155\001\002\000\012\103" +
    "\160\104\161\105\157\106\162\001\002\000\004\024\163" +
    "\001\002\000\004\024\uff8e\001\002\000\004\024\uff90\001" +
    "\002\000\004\024\uff8f\001\002\000\004\024\uff8d\001\002" +
    "\000\006\020\uffb1\023\uffb1\001\002\000\004\022\165\001" +
    "\002\000\004\024\166\001\002\000\006\110\170\111\167" +
    "\001\002\000\004\024\uff91\001\002\000\004\024\uff92\001" +
    "\002\000\004\024\172\001\002\000\006\020\uffaf\023\uffaf" +
    "\001\002\000\004\022\174\001\002\000\004\024\175\001" +
    "\002\000\004\117\176\001\002\000\004\024\177\001\002" +
    "\000\006\020\uffb5\023\uffb5\001\002\000\004\022\201\001" +
    "\002\000\004\024\202\001\002\000\004\060\203\001\002" +
    "\000\004\024\204\001\002\000\006\020\uffad\023\uffad\001" +
    "\002\000\004\022\206\001\002\000\004\024\207\001\002" +
    "\000\006\041\147\117\150\001\002\000\004\024\211\001" +
    "\002\000\006\020\uffb2\023\uffb2\001\002\000\004\022\213" +
    "\001\002\000\004\024\214\001\002\000\004\057\215\001" +
    "\002\000\004\024\216\001\002\000\006\020\uffb4\023\uffb4" +
    "\001\002\000\004\022\220\001\002\000\004\024\221\001" +
    "\002\000\004\116\222\001\002\000\004\024\223\001\002" +
    "\000\006\020\uffab\023\uffab\001\002\000\004\024\073\001" +
    "\002\000\006\020\230\023\227\001\002\000\006\016\uffb9" +
    "\023\uffb9\001\002\000\004\024\073\001\002\000\006\016" +
    "\uffb7\023\uffb7\001\002\000\006\016\uffb8\023\uffb8\001\002" +
    "\000\004\017\070\001\002\000\004\016\uffbb\001\002\000" +
    "\004\005\235\001\002\000\004\017\236\001\002\000\004" +
    "\024\237\001\002\000\004\025\240\001\002\000\004\024" +
    "\241\001\002\000\004\022\242\001\002\000\004\015\243" +
    "\001\002\000\004\017\245\001\002\000\006\016\uffe7\023" +
    "\307\001\002\000\004\024\250\001\002\000\004\016\ufff8" +
    "\001\002\000\004\023\301\001\002\000\012\032\251\033" +
    "\254\034\253\037\252\001\002\000\004\024\274\001\002" +
    "\000\004\024\267\001\002\000\004\024\262\001\002\000" +
    "\004\024\255\001\002\000\004\022\256\001\002\000\004" +
    "\024\257\001\002\000\004\117\260\001\002\000\004\024" +
    "\261\001\002\000\006\020\uffe2\023\uffe2\001\002\000\004" +
    "\022\263\001\002\000\004\024\264\001\002\000\004\040" +
    "\265\001\002\000\004\024\266\001\002\000\006\020\uffe0" +
    "\023\uffe0\001\002\000\004\022\270\001\002\000\004\024" +
    "\271\001\002\000\004\117\272\001\002\000\004\024\273" +
    "\001\002\000\006\020\uffe1\023\uffe1\001\002\000\004\022" +
    "\275\001\002\000\004\024\276\001\002\000\004\117\277" +
    "\001\002\000\004\024\300\001\002\000\006\020\uffe3\023" +
    "\uffe3\001\002\000\004\024\250\001\002\000\006\020\305" +
    "\023\304\001\002\000\006\016\uffe6\023\uffe6\001\002\000" +
    "\004\024\250\001\002\000\006\016\uffe4\023\uffe4\001\002" +
    "\000\006\016\uffe5\023\uffe5\001\002\000\004\017\245\001" +
    "\002\000\004\016\uffe8\001\002\000\004\005\312\001\002" +
    "\000\004\017\313\001\002\000\004\024\314\001\002\000" +
    "\004\042\315\001\002\000\004\024\316\001\002\000\004" +
    "\022\317\001\002\000\004\015\320\001\002\000\004\017" +
    "\321\001\002\000\004\024\327\001\002\000\006\016\uffcd" +
    "\023\324\001\002\000\004\016\ufff3\001\002\000\004\017" +
    "\321\001\002\000\004\016\uffce\001\002\000\004\023\363" +
    "\001\002\000\012\044\330\045\333\046\331\047\332\001" +
    "\002\000\004\024\356\001\002\000\004\024\351\001\002" +
    "\000\004\024\341\001\002\000\004\024\334\001\002\000" +
    "\004\022\335\001\002\000\004\024\336\001\002\000\006" +
    "\041\147\117\150\001\002\000\004\024\340\001\002\000" +
    "\006\020\uffc8\023\uffc8\001\002\000\004\022\342\001\002" +
    "\000\004\024\343\001\002\000\010\054\347\055\346\056" +
    "\345\001\002\000\004\024\350\001\002\000\004\024\uff8a" +
    "\001\002\000\004\024\uff8b\001\002\000\004\024\uff8c\001" +
    "\002\000\006\020\uffc6\023\uffc6\001\002\000\004\022\352" +
    "\001\002\000\004\024\353\001\002\000\004\117\354\001" +
    "\002\000\004\024\355\001\002\000\006\020\uffc7\023\uffc7" +
    "\001\002\000\004\022\357\001\002\000\004\024\360\001" +
    "\002\000\004\057\361\001\002\000\004\024\362\001\002" +
    "\000\006\020\uffc9\023\uffc9\001\002\000\004\024\327\001" +
    "\002\000\006\016\uffcc\023\uffcc\001\002\000\006\020\367" +
    "\023\366\001\002\000\004\024\327\001\002\000\006\016" +
    "\uffca\023\uffca\001\002\000\006\016\uffcb\023\uffcb\001\002" +
    "\000\004\005\372\001\002\000\004\017\373\001\002\000" +
    "\004\024\374\001\002\000\004\025\375\001\002\000\004" +
    "\024\376\001\002\000\004\022\377\001\002\000\004\015" +
    "\u0100\001\002\000\006\017\u0101\024\u0104\001\002\000\004" +
    "\024\u0104\001\002\000\006\016\uffde\023\u0113\001\002\000" +
    "\004\016\ufff6\001\002\000\006\027\u0108\030\u0107\001\002" +
    "\000\004\020\u0106\001\002\000\006\016\uffdc\023\uffdc\001" +
    "\002\000\004\024\u010e\001\002\000\004\024\u0109\001\002" +
    "\000\004\022\u010a\001\002\000\004\024\u010b\001\002\000" +
    "\004\117\u010c\001\002\000\004\024\u010d\001\002\000\006" +
    "\020\uffdb\023\uffdb\001\002\000\004\022\u010f\001\002\000" +
    "\004\024\u0110\001\002\000\004\117\u0111\001\002\000\004" +
    "\024\u0112\001\002\000\006\020\uffda\023\uffda\001\002\000" +
    "\006\017\u0101\024\u0104\001\002\000\004\016\uffdf\001\002" +
    "\000\004\023\u0116\001\002\000\006\017\u0101\024\u0104\001" +
    "\002\000\006\016\uffdd\023\uffdd\001\002\000\004\024\u0119" +
    "\001\002\000\004\005\u011a\001\002\000\004\017\u011b\001" +
    "\002\000\004\024\u011c\001\002\000\004\025\u011d\001\002" +
    "\000\004\024\u011e\001\002\000\004\022\u011f\001\002\000" +
    "\004\015\u0120\001\002\000\006\017\u0121\024\u0123\001\002" +
    "\000\004\024\u0123\001\002\000\004\020\u013a\001\002\000" +
    "\010\027\u0129\030\u012a\051\u0128\001\002\000\006\016\uffee" +
    "\023\u0126\001\002\000\004\016\ufff9\001\002\000\006\017" +
    "\u0121\024\u0123\001\002\000\004\016\uffef\001\002\000\004" +
    "\024\u0135\001\002\000\004\024\u0130\001\002\000\004\024" +
    "\u012b\001\002\000\004\022\u012c\001\002\000\004\024\u012d" +
    "\001\002\000\004\117\u012e\001\002\000\004\024\u012f\001" +
    "\002\000\006\020\uffea\023\uffea\001\002\000\004\022\u0131" +
    "\001\002\000\004\024\u0132\001\002\000\004\117\u0133\001" +
    "\002\000\004\024\u0134\001\002\000\006\020\uffeb\023\uffeb" +
    "\001\002\000\004\022\u0136\001\002\000\004\024\u0137\001" +
    "\002\000\004\040\u0138\001\002\000\004\024\u0139\001\002" +
    "\000\006\020\uffe9\023\uffe9\001\002\000\006\016\uffec\023" +
    "\uffec\001\002\000\004\023\u013c\001\002\000\006\017\u0121" +
    "\024\u0123\001\002\000\006\016\uffed\023\uffed\001\002\000" +
    "\004\005\u013f\001\002\000\004\017\u0140\001\002\000\004" +
    "\024\u0141\001\002\000\004\042\u0142\001\002\000\004\024" +
    "\u0143\001\002\000\004\022\u0144\001\002\000\004\015\u0145" +
    "\001\002\000\004\017\u0146\001\002\000\004\024\u014c\001" +
    "\002\000\004\016\ufff5\001\002\000\006\016\uffd8\023\u0149" +
    "\001\002\000\004\017\u0146\001\002\000\004\016\uffd9\001" +
    "\002\000\004\023\u0171\001\002\000\016\044\u014d\045\u0152" +
    "\046\u014f\047\u0150\050\u0151\051\u014e\001\002\000\004\024" +
    "\u016c\001\002\000\004\024\u0167\001\002\000\004\024\u0162" +
    "\001\002\000\004\024\u015d\001\002\000\004\024\u0158\001" +
    "\002\000\004\024\u0153\001\002\000\004\022\u0154\001\002" +
    "\000\004\024\u0155\001\002\000\006\041\147\117\150\001" +
    "\002\000\004\024\u0157\001\002\000\006\020\uffd3\023\uffd3" +
    "\001\002\000\004\022\u0159\001\002\000\004\024\u015a\001" +
    "\002\000\004\117\u015b\001\002\000\004\024\u015c\001\002" +
    "\000\006\020\uffd0\023\uffd0\001\002\000\004\022\u015e\001" +
    "\002\000\004\024\u015f\001\002\000\010\054\347\055\346" +
    "\056\345\001\002\000\004\024\u0161\001\002\000\006\020" +
    "\uffd1\023\uffd1\001\002\000\004\022\u0163\001\002\000\004" +
    "\024\u0164\001\002\000\004\117\u0165\001\002\000\004\024" +
    "\u0166\001\002\000\006\020\uffd2\023\uffd2\001\002\000\004" +
    "\022\u0168\001\002\000\004\024\u0169\001\002\000\004\040" +
    "\u016a\001\002\000\004\024\u016b\001\002\000\006\020\uffcf" +
    "\023\uffcf\001\002\000\004\022\u016d\001\002\000\004\024" +
    "\u016e\001\002\000\004\057\u016f\001\002\000\004\024\u0170" +
    "\001\002\000\006\020\uffd4\023\uffd4\001\002\000\004\024" +
    "\u014c\001\002\000\006\020\u0175\023\u0174\001\002\000\006" +
    "\016\uffd7\023\uffd7\001\002\000\004\024\u014c\001\002\000" +
    "\006\016\uffd5\023\uffd5\001\002\000\006\016\uffd6\023\uffd6" +
    "\001\002\000\004\005\u0178\001\002\000\004\017\u0179\001" +
    "\002\000\004\024\u017a\001\002\000\004\042\u017b\001\002" +
    "\000\004\024\u017c\001\002\000\004\022\u017d\001\002\000" +
    "\004\015\u017e\001\002\000\004\017\u017f\001\002\000\004" +
    "\024\u0184\001\002\000\004\016\ufff4\001\002\000\006\016" +
    "\uffc1\023\u0182\001\002\000\004\017\u017f\001\002\000\004" +
    "\016\uffc2\001\002\000\004\044\u0185\001\002\000\004\024" +
    "\u0186\001\002\000\004\022\u0187\001\002\000\004\024\u0188" +
    "\001\002\000\004\057\u0189\001\002\000\004\024\u018a\001" +
    "\002\000\004\020\u018b\001\002\000\006\016\uffc0\023\uffc0" +
    "\001\002\000\004\005\u018d\001\002\000\004\017\u018e\001" +
    "\002\000\004\024\u018f\001\002\000\004\061\u0190\001\002" +
    "\000\004\024\u0191\001\002\000\004\022\u0192\001\002\000" +
    "\004\015\u0193\001\002\000\004\017\u0195\001\002\000\004" +
    "\016\ufff1\001\002\000\004\024\u0199\001\002\000\006\016" +
    "\uffbe\023\u0197\001\002\000\004\017\u0195\001\002\000\004" +
    "\016\uffbf\001\002\000\006\044\u019a\066\u019b\001\002\000" +
    "\004\024\u01aa\001\002\000\004\024\u019c\001\002\000\004" +
    "\022\u019d\001\002\000\004\024\u019e\001\002\000\004\057" +
    "\u019f\001\002\000\004\024\u01a0\001\002\000\004\023\u01a1" +
    "\001\002\000\004\024\u01a2\001\002\000\004\044\u01a3\001" +
    "\002\000\004\024\u01a4\001\002\000\004\022\u01a5\001\002" +
    "\000\004\024\u01a6\001\002\000\004\057\u01a7\001\002\000" +
    "\004\024\u01a8\001\002\000\004\020\u01a9\001\002\000\006" +
    "\016\uffbc\023\uffbc\001\002\000\004\022\u01ab\001\002\000" +
    "\004\024\u01ac\001\002\000\004\057\u01ad\001\002\000\004" +
    "\024\u01ae\001\002\000\004\023\u01af\001\002\000\004\024" +
    "\u01b0\001\002\000\004\066\u01b1\001\002\000\004\024\u01b2" +
    "\001\002\000\004\022\u01b3\001\002\000\004\024\u01b4\001" +
    "\002\000\004\057\u01b5\001\002\000\004\024\u01b6\001\002" +
    "\000\004\020\u01b7\001\002\000\006\016\uffbd\023\uffbd\001" +
    "\002\000\006\002\ufffc\004\ufffc\001\002\000\004\020\u01ba" +
    "\001\002\000\004\004\u01bb\001\002\000\004\012\u01bc\001" +
    "\002\000\004\006\u01bd\001\002\000\004\005\u01be\001\002" +
    "\000\006\002\uff89\004\uff89\001\002\000\004\005\u01c0\001" +
    "\002\000\004\017\u01c1\001\002\000\004\024\u01c2\001\002" +
    "\000\004\061\u01c3\001\002\000\004\024\u01c4\001\002\000" +
    "\004\022\u01c5\001\002\000\004\015\u01c6\001\002\000\004" +
    "\017\u01c7\001\002\000\004\024\u01cd\001\002\000\004\016" +
    "\ufff2\001\002\000\006\016\uffa9\023\u01ca\001\002\000\004" +
    "\017\u01c7\001\002\000\004\016\uffaa\001\002\000\004\023" +
    "\u0210\001\002\000\030\044\u01d6\065\u01d1\066\u01ce\067\u01d7" +
    "\101\u01d0\102\u01d4\107\u01d3\112\u01d5\113\u01d2\114\u01d8\115" +
    "\u01cf\001\002\000\004\024\u020b\001\002\000\004\024\u0206" +
    "\001\002\000\004\024\u0201\001\002\000\004\024\u01fc\001" +
    "\002\000\004\024\u01f7\001\002\000\004\024\u01f2\001\002" +
    "\000\004\024\u01ed\001\002\000\004\024\u01e8\001\002\000" +
    "\004\024\u01e3\001\002\000\004\024\u01de\001\002\000\004" +
    "\024\u01d9\001\002\000\004\022\u01da\001\002\000\004\024" +
    "\u01db\001\002\000\004\060\u01dc\001\002\000\004\024\u01dd" +
    "\001\002\000\006\020\uff9c\023\uff9c\001\002\000\004\022" +
    "\u01df\001\002\000\004\024\u01e0\001\002\000\022\070\134" +
    "\071\130\072\127\073\132\074\133\075\126\076\135\077" +
    "\125\001\002\000\004\024\u01e2\001\002\000\006\020\uffa2" +
    "\023\uffa2\001\002\000\004\022\u01e4\001\002\000\004\024" +
    "\u01e5\001\002\000\004\057\u01e6\001\002\000\004\024\u01e7" +
    "\001\002\000\006\020\uffa5\023\uffa5\001\002\000\004\022" +
    "\u01e9\001\002\000\004\024\u01ea\001\002\000\006\041\147" +
    "\117\150\001\002\000\004\024\u01ec\001\002\000\006\020" +
    "\uff9e\023\uff9e\001\002\000\004\022\u01ee\001\002\000\004" +
    "\024\u01ef\001\002\000\012\103\160\104\161\105\157\106" +
    "\162\001\002\000\004\024\u01f1\001\002\000\006\020\uffa0" +
    "\023\uffa0\001\002\000\004\022\u01f3\001\002\000\004\024" +
    "\u01f4\001\002\000\006\110\170\111\167\001\002\000\004" +
    "\024\u01f6\001\002\000\006\020\uff9f\023\uff9f\001\002\000" +
    "\004\022\u01f8\001\002\000\004\024\u01f9\001\002\000\004" +
    "\060\u01fa\001\002\000\004\024\u01fb\001\002\000\006\020" +
    "\uff9d\023\uff9d\001\002\000\004\022\u01fd\001\002\000\004" +
    "\024\u01fe\001\002\000\004\117\u01ff\001\002\000\004\024" +
    "\u0200\001\002\000\006\020\uffa4\023\uffa4\001\002\000\004" +
    "\022\u0202\001\002\000\004\024\u0203\001\002\000\006\041" +
    "\147\117\150\001\002\000\004\024\u0205\001\002\000\006" +
    "\020\uffa1\023\uffa1\001\002\000\004\022\u0207\001\002\000" +
    "\004\024\u0208\001\002\000\004\116\u0209\001\002\000\004" +
    "\024\u020a\001\002\000\006\020\uff9b\023\uff9b\001\002\000" +
    "\004\022\u020c\001\002\000\004\024\u020d\001\002\000\004" +
    "\057\u020e\001\002\000\004\024\u020f\001\002\000\006\020" +
    "\uffa3\023\uffa3\001\002\000\004\024\u01cd\001\002\000\006" +
    "\020\u0214\023\u0213\001\002\000\006\016\uffa8\023\uffa8\001" +
    "\002\000\004\024\u01cd\001\002\000\006\016\uffa6\023\uffa6" +
    "\001\002\000\006\016\uffa7\023\uffa7\001\002\000\004\006" +
    "\u0217\001\002\000\006\010\u0219\011\u0218\001\002\000\004" +
    "\022\u021b\001\002\000\004\005\u021a\001\002\000\004\002" +
    "\ufffe\001\002\000\004\024\u021c\001\002\000\026\026\ufffa" +
    "\031\027\035\031\036\025\043\023\052\022\053\026\062" +
    "\017\063\021\064\030\001\002\000\004\016\u01b9\001\002" +
    "\000\006\002\ufffd\004\ufffd\001\002\000\006\007\u0220\011" +
    "\014\001\002\000\004\005\u0221\001\002\000\004\004\ufffb" +
    "\001\002\000\004\006\u0223\001\002\000\004\011\u0218\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0222\000\012\002\004\003\003\004\005\006\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\055\023\001\001\000" +
    "\002\001\001\000\004\007\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\042\037" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\045\037\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\070" +
    "\031\066\001\001\000\002\001\001\000\004\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\224\052\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\224\052\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\232\031\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\245\024\243\001\001" +
    "\000\002\001\001\000\004\025\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\301\047\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\301\047\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\307\024\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\322\041" +
    "\321\001\001\000\004\042\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\324\041\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\364\051\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\364" +
    "\051\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\u0102\026\u0101\027\u0104\001\001\000\004" +
    "\027\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\u0113\026\u0101" +
    "\027\u0104\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u0116\027\u0104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\u0123\011\u0121\012\u0124\001" +
    "\001\000\004\011\u013a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u0123\011\u0121\012\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u013c\011\u0121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\u0146\035\u0147\001\001\000\004\036\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u0149\035\u0147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\u0171" +
    "\050\u0172\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\u0171\050\u0175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\u017f\040\u0180\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\u0182\040\u0180\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\u0193\030\u0195\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\u0197\030\u0195\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u01c7" +
    "\044\u01c8\001\001\000\004\045\u01cb\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\u01ca\044\u01c8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u01e0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\u01ea" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u01ef\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u01f4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u0203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u0210\053\u0211\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\u0210\053\u0214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u021c\055\023\001\001\000" +
    "\004\007\u021d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	
	
	ArrayList<ErrorSintactico> sintactico = new ArrayList<ErrorSintactico>();
	private Symbol sym;
    int contCreaUser=0;
	public CrearUsuario objCrearUsuario= new CrearUsuario();
	public ModificarUsuario objModifUsuario= new ModificarUsuario();
	public EliminarUsuario objElimUsuario= new EliminarUsuario();
	public NuevoForm objNuevoForm= new NuevoForm();
	public ModificarForm objModifForm= new ModificarForm();
	public EliminarForm objElimForm= new EliminarForm();
	public AgregarComponente objAgreComp= new AgregarComponente();
	public ModificarComponente objModifComp= new ModificarComponente();
	public EliminarComponente objElimComp= new EliminarComponente();
	ArrayList<Usuario> lstUsuario = new ArrayList<Usuario>();
	ArrayList<Formulario> lstFormulario = new ArrayList<Formulario>();
	ArrayList<Componente>  lstComponente = new ArrayList<Componente>();
    
	
    public Symbol getS(){
        return this.sym;
    }
	public parser( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){ 
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	
	public void syntax_error(Symbol cur_token) {
		//ErrorSintactico errorr= new ErrorSintactico(symbl_name_from_id(expected_token_ids().get(0))+"",cur_token.value+"",cur_token.left+"",cur_token.right+"");
		ErrorSintactico errorr= new ErrorSintactico();
		errorr.setTokenEsperado(symbl_name_from_id(expected_token_ids().get(0))+"");
		errorr.setLinea(cur_token.value+"");
		errorr.setColumna(cur_token.left+"");
		errorr.setValor(cur_token.right+"");

        sintactico.add(errorr);
		System.out.println("...SE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
    }
	protected int error_sync_size() {
        return 1;
    }
	public ArrayList<Usuario> getLstUsuario() {
        return lstUsuario;
    }
	public ArrayList<Formulario> getLstFormulario() {
        return lstFormulario;
    }
	public ArrayList<Componente> getLstComponente() {
        return lstComponente;
    }
	public ArrayList<ErrorSintactico> getSintacticoERROR() {
        return sintactico;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTADO_INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ESTADO_INICIAL ::= SOLICITUDES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADO_INICIAL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTADO_INICIAL ::= SOLICITUD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTADO_INICIAL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SOLICITUDES ::= OPEN_SOLICITUDES SOLICITUD DipleL Exclamation FinSolicitudes DipleR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SOLICITUDES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SOLICITUD ::= SOLICITUD DipleL Exclamation IniSolicitud DosP Comilla TIPO_SOLICITUD END_SOLICITUD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SOLICITUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SOLICITUD ::= DipleL Exclamation IniSolicitud DosP Comilla TIPO_SOLICITUD END_SOLICITUD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SOLICITUD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPEN_SOLICITUDES ::= DipleL Exclamation IniSolicitudes DipleR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPEN_SOLICITUDES",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
contCreaUser++;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO_SOLICITUD ::= NT$0 CrearUsuario Comilla DipleR Llave_L Comilla CredencialUser Comilla DosP Corchete_L AB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_SOLICITUD ::= ModificarUser Comilla DipleR Llave_L Comilla CredencialUser Comilla DosP Corchete_L AB2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_SOLICITUD ::= EliminarUsuario Comilla DipleR Llave_L Comilla CredencialUser Comilla DosP Corchete_L AB7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_SOLICITUD ::= Login Comilla DipleR Llave_L Comilla CredencialUser Comilla DosP Corchete_L AB3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_SOLICITUD ::= NuevoFormulario Comilla DipleR Llave_L Comilla ParametroForm Comilla DosP Corchete_L AB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_SOLICITUD ::= EliminarForm Comilla DipleR Llave_L Comilla ParametroForm Comilla DosP Corchete_L AB8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO_SOLICITUD ::= ModificarForm Comilla DipleR Llave_L Comilla ParametroForm Comilla DosP Corchete_L AB5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_SOLICITUD ::= AgregarComponente Comilla DipleR Llave_L Comilla ParametrosComponente Comilla DosP Corchete_L AB6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_SOLICITUD ::= EliminarComponente Comilla DipleR Llave_L Comilla ParametrosComponente Comilla DosP Corchete_L AB9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_SOLICITUD ::= ModificarComponente Comilla DipleR Llave_L Comilla ParametrosComponente Comilla DosP Corchete_L AB10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AB ::= BLOQUE_CREA_USER Coma AB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AB ::= BLOQUE_CREA_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE_CREA_USER ::= Llave_L BLOQUE_CREA_USER2 Coma BLOQUE_CREA_USER 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CREA_USER",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_CREA_USER ::= BLOQUE_CREA_USER2 Llave_R 
            {
              Object RESULT =null;
		lstUsuario.add(objCrearUsuario); objCrearUsuario= new CrearUsuario(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CREA_USER",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE_CREA_USER2 ::= Comilla Usuario Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objCrearUsuario.setUsuario(aa.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CREA_USER2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE_CREA_USER2 ::= Comilla Password Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objCrearUsuario.setPassword(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CREA_USER2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE_CREA_USER2 ::= Comilla FechaCreacion Comilla DosP Comilla FechaF Comilla 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objCrearUsuario.setFechaCreacion(f.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CREA_USER2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AB2 ::= BLOQUE_MODIF_USER Coma AB2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AB2 ::= BLOQUE_MODIF_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE_MODIF_USER ::= Llave_L BLOQUE_MODIF_USER2 Coma XXX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_USER",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // XXX ::= BLOQUE_MODIF_USER2 Coma XXX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("XXX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // XXX ::= BLOQUE_MODIF_USER2 Llave_R 
            {
              Object RESULT =null;
		lstUsuario.add(objModifUsuario); objModifUsuario= new ModificarUsuario(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XXX",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE_MODIF_USER2 ::= Comilla UserAntiguo Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object aa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 objModifUsuario.setUsuarioAnt(aa.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_USER2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE_MODIF_USER2 ::= Comilla UserNuevo Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 objModifUsuario.setUsuarioNue(a.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_USER2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE_MODIF_USER2 ::= Comilla NuevoPassword Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 objModifUsuario.setNuevoPass(pas.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_USER2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE_MODIF_USER2 ::= Comilla FechaModif Comilla DosP Comilla FechaF Comilla 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifUsuario.setFechaModif(f.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_USER2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AB3 ::= BLOQUE_LOGIN_USER Coma AB3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AB3 ::= BLOQUE_LOGIN_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB3",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE_LOGIN_USER ::= Llave_L BLOQUE_LOGIN_USER2 Coma BLOQUE_LOGIN_USER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LOGIN_USER",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE_LOGIN_USER ::= BLOQUE_LOGIN_USER2 Llave_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LOGIN_USER",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE_LOGIN_USER2 ::= Comilla Usuario Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LOGIN_USER2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUE_LOGIN_USER2 ::= Comilla Password Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LOGIN_USER2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AB4 ::= BLOQUE_NUEVO_FORM Coma AB4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB4",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AB4 ::= BLOQUE_NUEVO_FORM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB4",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE_NUEVO_FORM ::= Llave_L BLOQUE_NUEVO_FORM2 Coma N_FORM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_NUEVO_FORM",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_FORM ::= BLOQUE_NUEVO_FORM2 Coma N_FORM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_FORM",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_FORM ::= BLOQUE_NUEVO_FORM2 Llave_R 
            {
              Object RESULT =null;
		lstFormulario.add(objNuevoForm); objNuevoForm= new NuevoForm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("N_FORM",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE_NUEVO_FORM2 ::= Comilla ID Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objNuevoForm.setId(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_NUEVO_FORM2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE_NUEVO_FORM2 ::= Comilla TituloForm Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objNuevoForm.setTitulo(t.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_NUEVO_FORM2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE_NUEVO_FORM2 ::= Comilla NombreForm Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objNuevoForm.setNombre(n.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_NUEVO_FORM2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE_NUEVO_FORM2 ::= Comilla TemaForm Comilla DosP Comilla TEMAS Comilla 
            {
              Object RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object te = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objNuevoForm.setTema(te.toString());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_NUEVO_FORM2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE_NUEVO_FORM2 ::= Comilla UserCreacion Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object us = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objNuevoForm.setUsuarioCreacion(us.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_NUEVO_FORM2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE_NUEVO_FORM2 ::= Comilla FechaCreacion Comilla DosP Comilla FechaF Comilla 
            {
              Object RESULT =null;
		int fecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objNuevoForm.setFechaCreacion(fec.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_NUEVO_FORM2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AB5 ::= BLOQUE_MODIF_FORM Coma AB5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB5",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AB5 ::= BLOQUE_MODIF_FORM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB5",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_MODIF_FORM ::= Llave_L BLOQUE_MODIF_FORM2 Coma M_FORM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_FORM",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // M_FORM ::= BLOQUE_MODIF_FORM2 Coma M_FORM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M_FORM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // M_FORM ::= BLOQUE_MODIF_FORM2 Llave_R 
            {
              Object RESULT =null;
		lstFormulario.add(objModifForm); objModifForm= new ModificarForm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M_FORM",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_MODIF_FORM2 ::= Comilla ID Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifForm.setId(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_FORM2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE_MODIF_FORM2 ::= Comilla TituloForm Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifForm.setTitulo(tit.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_FORM2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE_MODIF_FORM2 ::= Comilla NombreForm Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifForm.setNombre(nom.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_FORM2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOQUE_MODIF_FORM2 ::= Comilla TemaForm Comilla DosP Comilla TEMAS Comilla 
            {
              Object RESULT =null;
		int temleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int temright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tem = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifForm.setTema(tem.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_FORM2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AB7 ::= BLOQUE_ELIMINA_USUARIO Coma AB7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB7",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AB7 ::= BLOQUE_ELIMINA_USUARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB7",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE_ELIMINA_USUARIO ::= Llave_L Comilla Usuario Comilla DosP Comilla EXP_user_pass Comilla Llave_R 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		objElimUsuario.setUsuario(u.toString()); lstUsuario.add(objElimUsuario); objElimUsuario= new EliminarUsuario();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELIMINA_USUARIO",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AB8 ::= BLOQUE_ELIMINA_FORM Coma AB8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB8",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AB8 ::= BLOQUE_ELIMINA_FORM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB8",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE_ELIMINA_FORM ::= Llave_L Comilla ID Comilla DosP Comilla Allids Comilla Llave_R 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		objElimForm.setId(id.toString());lstFormulario.add(objElimForm); objElimForm= new EliminarForm();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELIMINA_FORM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AB9 ::= BLOQUE_ELIMINA_COMP Coma AB9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB9",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AB9 ::= BLOQUE_ELIMINA_COMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB9",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BLOQUE_ELIMINA_COMP ::= Llave_L Comilla ID Comilla DosP Comilla Allids Comilla Coma Comilla Formulario Comilla DosP Comilla Allids Comilla Llave_R 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idformleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idformright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idform = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		objElimComp.setId(id.toString()); objElimComp.setFormulario(idform.toString()); lstComponente.add(objElimComp); objElimComp= new EliminarComponente(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELIMINA_COMP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BLOQUE_ELIMINA_COMP ::= Llave_L Comilla Formulario Comilla DosP Comilla Allids Comilla Coma Comilla ID Comilla DosP Comilla Allids Comilla Llave_R 
            {
              Object RESULT =null;
		int idformleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idformright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object idform = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		objElimComp.setId(id.toString()); objElimComp.setFormulario(idform.toString()); lstComponente.add(objElimComp); objElimComp= new EliminarComponente(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELIMINA_COMP",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AB10 ::= BLOQUE_MODIF_COMP Coma AB10 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB10",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AB10 ::= BLOQUE_MODIF_COMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB10",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE_MODIF_COMP ::= Llave_L BLOQUE_MODIF_COMP2 Coma M_COMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // M_COMP ::= BLOQUE_MODIF_COMP2 Coma M_COMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M_COMP",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // M_COMP ::= BLOQUE_MODIF_COMP2 Llave_R 
            {
              Object RESULT =null;
		lstComponente.add(objModifComp); objModifComp= new ModificarComponente();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M_COMP",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE_MODIF_COMP2 ::= Comilla ID Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 objModifComp.setId(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BLOQUE_MODIF_COMP2 ::= Comilla NombreCampo Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setNombreCampo(nom.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BLOQUE_MODIF_COMP2 ::= Comilla Formulario Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idformleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idformright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idform = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setFormulario(idform.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BLOQUE_MODIF_COMP2 ::= Comilla Clase Comilla DosP Comilla CLASESCOMPONENTES Comilla 
            {
              Object RESULT =null;
		int cComleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cComright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cCom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setClase(cCom.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BLOQUE_MODIF_COMP2 ::= Comilla TextoVisible Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int txttsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txttsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txtts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setTextoVisible(txtts.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BLOQUE_MODIF_COMP2 ::= Comilla Alineacion Comilla DosP Comilla ALINEACIONES Comilla 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setAlineacion(ali.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BLOQUE_MODIF_COMP2 ::= Comilla Indice Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int indileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object indi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setIndice(Integer.parseInt(indi.toString().trim())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUE_MODIF_COMP2 ::= Comilla Requerido Comilla DosP Comilla REQUERIDO Comilla 
            {
              Object RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setRequerido(req.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BLOQUE_MODIF_COMP2 ::= Comilla Opciones Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setOpciones(tst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BLOQUE_MODIF_COMP2 ::= Comilla Filas Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int filleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int filright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fil = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setFilas(Integer.parseInt(fil.toString().trim())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BLOQUE_MODIF_COMP2 ::= Comilla Columnas Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setColumnas(Integer.parseInt(col.toString().trim())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BLOQUE_MODIF_COMP2 ::= Comilla Url Comilla DosP Comilla DirURL Comilla 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objModifComp.setUrl(rl.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_MODIF_COMP2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AB6 ::= BLOQUE_PARAMETRO_COMP Coma AB6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB6",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AB6 ::= BLOQUE_PARAMETRO_COMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AB6",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BLOQUE_PARAMETRO_COMP ::= Llave_L BLOQUE_PARAMETRO_COMP2 Coma EXX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXX ::= BLOQUE_PARAMETRO_COMP2 Coma EXX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXX",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXX ::= BLOQUE_PARAMETRO_COMP2 Llave_R 
            {
              Object RESULT =null;
		lstComponente.add(objAgreComp); objAgreComp= new AgregarComponente();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXX",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BLOQUE_PARAMETRO_COMP2 ::= Comilla ID Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 objAgreComp.setId(id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BLOQUE_PARAMETRO_COMP2 ::= Comilla NombreCampo Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setNombreCampo(nom.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Formulario Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idformleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idformright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idform = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setFormulario(idform.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Clase Comilla DosP Comilla CLASESCOMPONENTES Comilla 
            {
              Object RESULT =null;
		int cComleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cComright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cCom = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setClase(cCom.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BLOQUE_PARAMETRO_COMP2 ::= Comilla TextoVisible Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int txtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 objAgreComp.setTextoVisible(txts.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Alineacion Comilla DosP Comilla ALINEACIONES Comilla 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setAlineacion(ali.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Requerido Comilla DosP Comilla REQUERIDO Comilla 
            {
              Object RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setRequerido(req.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Opciones Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setOpciones(tst.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Filas Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int filleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int filright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fil = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setFilas(Integer.parseInt(fil.toString().trim())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Columnas Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setColumnas(Integer.parseInt(col.toString().trim())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BLOQUE_PARAMETRO_COMP2 ::= Comilla Url Comilla DosP Comilla DirURL Comilla 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		objAgreComp.setUrl(rl.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETRO_COMP2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CLASESCOMPONENTES ::= CampoTexto 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CLASESCOMPONENTES ::= AreaTexto 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CLASESCOMPONENTES ::= Checkbox 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ch;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CLASESCOMPONENTES ::= Radio 
            {
              Object RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=rd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CLASESCOMPONENTES ::= Fichero 
            {
              Object RESULT =null;
		int fchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fchright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fch = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=fch;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CLASESCOMPONENTES ::= Imagen 
            {
              Object RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object img = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=img;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CLASESCOMPONENTES ::= Combo 
            {
              Object RESULT =null;
		int cmbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cmb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=cmb;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CLASESCOMPONENTES ::= Boton 
            {
              Object RESULT =null;
		int btnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int btnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object btn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=btn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // REQUERIDO ::= Si 
            {
              Object RESULT =null;
		int yesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object yes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=yes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQUERIDO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // REQUERIDO ::= No 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=not;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQUERIDO",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ALINEACIONES ::= Centro 
            {
              Object RESULT =null;
		int ctrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ctr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ctr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ALINEACIONES ::= Izquierda 
            {
              Object RESULT =null;
		int iqzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iqzright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iqz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=iqz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ALINEACIONES ::= Derecha 
            {
              Object RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=der;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ALINEACIONES ::= Justificar 
            {
              Object RESULT =null;
		int jusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object jus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=jus;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TEMAS ::= TDark 
            {
              Object RESULT =null;
		int drkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int drkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object drk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=drk;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMAS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TEMAS ::= TBlue 
            {
              Object RESULT =null;
		int bleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ble = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ble;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMAS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TEMAS ::= TWhite 
            {
              Object RESULT =null;
		int whtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object wht = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=wht;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEMAS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // END_SOLICITUD ::= Corchete_R Llave_R DipleL FinSolicitud Exclamation DipleR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("END_SOLICITUD",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TEXTOS ::= Textos 
            {
              Object RESULT =null;
		int asdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=asd;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTOS",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TEXTOS ::= EXP_user_pass 
            {
              Object RESULT =null;
		int adfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object adf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=adf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TEXTOS",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

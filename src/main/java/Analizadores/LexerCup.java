// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: suma.jflex

package Analizadores;

import static Analizadores.sym.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import GestorIndigo.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  3,  4,  5,  6,  5,  5,  7,  8,  9,  0,  0, 10, 11, 12, 13, 
    14, 15, 16, 17, 18, 18, 18, 18, 18, 18, 19,  0, 20,  0, 21,  0, 
     5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
    37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,  0, 49,  0, 50, 
     0, 51, 46, 52, 53, 54, 55, 46, 56, 57, 46, 58, 59, 60, 61, 62, 
    63, 46, 64, 65, 66, 67, 46, 46, 46, 46, 46, 68, 69, 70,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\6\2\5\1\13\1\14\1\15"+
    "\23\5\1\16\1\17\3\5\1\20\1\21\1\22\1\23"+
    "\1\0\1\5\1\0\23\5\1\24\7\5\1\25\2\5"+
    "\1\26\4\5\1\27\2\5\1\30\5\5\1\31\1\5"+
    "\1\0\2\5\1\32\33\5\1\33\12\5\1\34\4\5"+
    "\1\31\1\5\1\0\4\5\1\35\12\5\1\36\5\5"+
    "\1\37\17\5\1\40\7\5\1\0\3\5\1\41\3\5"+
    "\1\42\1\5\1\43\7\5\1\44\16\5\1\45\5\5"+
    "\1\46\1\47\3\5\1\0\4\5\1\50\13\5\1\51"+
    "\1\52\5\5\1\53\5\5\1\54\1\5\1\55\1\5"+
    "\1\0\1\5\1\0\11\5\1\56\3\5\1\57\17\5"+
    "\1\60\1\0\1\5\1\61\4\5\1\62\1\63\1\64"+
    "\17\5\1\65\1\5\1\66\3\5\1\0\10\5\1\67"+
    "\10\5\1\70\7\5\1\71\4\5\1\0\1\72\1\5"+
    "\1\73\1\74\12\5\1\75\1\5\1\76\13\5\1\77"+
    "\45\5\1\100\12\5\1\101\6\5\1\102\1\103\1\104"+
    "\7\5\1\105\2\5\1\106\6\5\1\107\7\5\1\110"+
    "\5\5\1\111\5\5\1\112\1\113\6\5\1\114\5\5"+
    "\1\115\4\5\1\116\2\5\1\117\7\5\1\120\2\5"+
    "\1\121\3\5\1\122\5\5\1\123\1\124\4\5\1\125"+
    "\1\126\1\127\2\5\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[544];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\107\0\107\0\u011c\0\u0163"+
    "\0\107\0\107\0\107\0\107\0\u01aa\0\u01f1\0\u0238\0\107"+
    "\0\107\0\107\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\107\0\107\0\u07c4"+
    "\0\u080b\0\u0852\0\107\0\216\0\107\0\u0899\0\u08e0\0\u0927"+
    "\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f"+
    "\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97"+
    "\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0429\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u0429"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u0429\0\u12dc\0\u1323\0\u0429"+
    "\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b"+
    "\0\u15a2\0\u15e9\0\u0429\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c"+
    "\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984"+
    "\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u0429\0\u1dad"+
    "\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u0429\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u0429\0\u2380\0\u23c7"+
    "\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff"+
    "\0\u0429\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u0429\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u0429\0\u2f26\0\u2f6d\0\u2fb4\0\u0429\0\u2ffb"+
    "\0\u0429\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec"+
    "\0\u0429\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u0429"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u0429\0\u0429\0\u3778"+
    "\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u0429"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u3c76\0\u0429\0\u0429\0\u3cbd\0\u3d04\0\u3d4b"+
    "\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83"+
    "\0\u0429\0\u3fca\0\u0429\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d"+
    "\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365"+
    "\0\u0429\0\u43ac\0\u43f3\0\u443a\0\u0429\0\u4481\0\u44c8\0\u450f"+
    "\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747"+
    "\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f"+
    "\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b\0\u0429\0\u0429\0\u4ae2\0\u4b29"+
    "\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61"+
    "\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u0429\0\u4f52"+
    "\0\u0429\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143"+
    "\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u0429\0\u52ed\0\u5334"+
    "\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de\0\u0429\0\u5525"+
    "\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u0429\0\u5716"+
    "\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u011c\0\u5879\0\u0429\0\u011c"+
    "\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1"+
    "\0\u5af8\0\u5b3f\0\u0429\0\u5b86\0\u0429\0\u5bcd\0\u5c14\0\u5c5b"+
    "\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93"+
    "\0\u011c\0\u5eda\0\u5f21\0\u5f68\0\u5faf\0\u5ff6\0\u603d\0\u6084"+
    "\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e\0\u6275\0\u62bc"+
    "\0\u6303\0\u634a\0\u6391\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4"+
    "\0\u653b\0\u6582\0\u65c9\0\u6610\0\u6657\0\u669e\0\u66e5\0\u672c"+
    "\0\u6773\0\u67ba\0\u6801\0\u6848\0\u688f\0\u68d6\0\u011c\0\u691d"+
    "\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e\0\u6b55"+
    "\0\u6b9c\0\u011c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8\0\u6cff\0\u6d46"+
    "\0\u6d8d\0\u6dd4\0\u011c\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37"+
    "\0\u6f7e\0\u6fc5\0\u011c\0\u700c\0\u7053\0\u011c\0\u709a\0\u70e1"+
    "\0\u7128\0\u716f\0\u71b6\0\u71fd\0\u011c\0\u7244\0\u728b\0\u72d2"+
    "\0\u7319\0\u7360\0\u73a7\0\u73ee\0\u011c\0\u7435\0\u747c\0\u74c3"+
    "\0\u750a\0\u7551\0\u011c\0\u7598\0\u75df\0\u7626\0\u766d\0\u76b4"+
    "\0\u011c\0\u011c\0\u76fb\0\u7742\0\u7789\0\u77d0\0\u7817\0\u785e"+
    "\0\u011c\0\u78a5\0\u78ec\0\u7933\0\u797a\0\u79c1\0\u011c\0\u7a08"+
    "\0\u7a4f\0\u7a96\0\u7add\0\u011c\0\u7b24\0\u7b6b\0\u011c\0\u7bb2"+
    "\0\u7bf9\0\u7c40\0\u7c87\0\u7cce\0\u7d15\0\u7d5c\0\u011c\0\u7da3"+
    "\0\u7dea\0\u011c\0\u7e31\0\u7e78\0\u7ebf\0\u011c\0\u7f06\0\u7f4d"+
    "\0\u7f94\0\u7fdb\0\u8022\0\u011c\0\u011c\0\u8069\0\u80b0\0\u80f7"+
    "\0\u813e\0\u011c\0\u011c\0\u011c\0\u8185\0\u81cc\0\u011c\0\u011c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[544];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\2\2\1\16\2\17\2\16"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\31\1\32\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\1\40\1\31\1\41\1\42\1\43\1\44\1\31"+
    "\1\45\3\31\1\46\1\47\1\15\4\31\1\50\1\51"+
    "\1\52\12\31\1\53\1\54\1\55\110\0\2\3\102\0"+
    "\1\3\2\0\1\3\1\4\2\0\1\56\5\0\1\56"+
    "\2\0\5\56\3\0\32\56\2\0\22\56\1\0\1\3"+
    "\3\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\32\7\2\0\22\7\11\0\1\10\4\0\1\10"+
    "\2\0\5\10\3\0\32\10\2\0\22\10\5\0\1\56"+
    "\2\0\1\7\1\10\4\0\1\15\2\0\5\15\3\0"+
    "\32\15\2\0\22\15\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\57\1\0\5\16\3\0\32\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\57\1\0"+
    "\5\60\3\0\32\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\6\31"+
    "\1\62\4\31\1\63\1\31\1\64\3\31\1\65\10\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\16\31\1\66\13\31"+
    "\2\0\1\7\10\31\1\67\10\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\1\70"+
    "\3\31\1\71\2\31\1\72\3\31\1\73\2\31\1\74"+
    "\2\31\1\75\10\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\4\31\1\76\25\31\2\0\1\7\1\77\20\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\13\31\1\100\16\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\4\31\1\101\3\31\1\102\5\31\1\103\13\31"+
    "\2\0\1\7\6\31\1\104\12\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\32\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\3\31\1\105\10\31"+
    "\1\106\1\107\13\31\1\110\2\0\1\7\12\31\1\111"+
    "\6\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\24\31\1\112\5\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\16\31\1\113\13\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\16\31\1\114\13\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\16\31\1\115\5\31\1\116\5\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\17\31\1\117\1\31"+
    "\1\120\10\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\1\121"+
    "\31\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\1\122\3\31"+
    "\1\123\25\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\4\31"+
    "\1\124\3\31\1\125\21\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\4\31\1\126\3\31\1\127\5\31\1\130\13\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\21\31\1\131\1\132"+
    "\7\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\7\31\1\133"+
    "\22\31\2\0\1\7\5\31\1\134\13\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\10\31\1\104\21\31\2\0\1\7\6\31\1\104\12\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\7\17\31\1\135\1\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\15\31\1\111\14\31\2\0\1\7\12\31"+
    "\1\111\6\31\5\0\1\56\2\0\1\56\5\0\1\56"+
    "\2\0\5\56\3\0\32\56\2\0\22\56\21\0\5\136"+
    "\66\0\1\56\2\0\1\7\5\0\1\7\1\57\1\0"+
    "\5\137\3\0\32\7\2\0\22\7\31\0\32\140\3\0"+
    "\21\140\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\21\31\1\141\10\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\10\31\1\142\21\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\3\31\1\143\26\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\4\31\1\144\25\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\23\31\1\145\6\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\32\31\2\0\1\7\20\31\1\146"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\14\31\1\147\15\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\15\31\1\150\14\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\151\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\1\152\31\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\13\31\1\153\1\154\1\155\14\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\4\31\1\156\25\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\21\31\1\157\10\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\32\31\2\0\1\7\15\31\1\160"+
    "\3\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\10\31\1\161\21\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\2\31\1\162\27\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\2\31\1\163\10\31\1\164\1\31"+
    "\1\165\14\31\2\0\1\7\12\31\1\165\6\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\21\31\1\166\10\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\15\31\1\165\14\31\2\0\1\7\12\31\1\165"+
    "\6\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\1\167\31\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\3\31\1\170\4\31\1\171\21\31\2\0"+
    "\1\7\6\31\1\171\12\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\20\31\1\172"+
    "\11\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\10\31\1\171"+
    "\21\31\2\0\1\7\6\31\1\171\12\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\22\31\1\173\7\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\6\31\1\174\23\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\3\31\1\175\26\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\14\31\1\176\6\31\1\177\6\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\200\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\2\31\1\201\27\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\21\31\1\202\1\203\7\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\3\31\1\204\26\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\20\31\1\205\11\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\13\31\1\206\16\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\14\31\1\207\12\31\1\210\2\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\23\31\1\211\6\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\13\31\1\212\16\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\24\31\1\213\5\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\4\31\1\214\25\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\32\31\2\0\1\7"+
    "\6\31\1\215\12\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\32\31\2\0\1\7"+
    "\17\31\1\216\1\31\21\0\5\217\66\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\57\1\0\5\220\3\0\32\7"+
    "\2\0\22\7\17\0\1\221\11\0\32\140\3\0\21\140"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\222\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\15\31\1\223\14\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\1\224\31\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\16\31\1\225\13\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\32\31\2\0\1\7\3\31\1\226\15\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\17\31\1\227\12\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\23\31\1\230\6\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\2\31\1\231\27\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\22\31\1\232\7\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\24\31\1\233\5\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\1\31\1\234\30\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\22\31\1\235\7\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\1\236\2\31\1\237\26\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\240\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\7\7\31\1\241\11\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\14\31\1\242\15\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\7\31\1\243\22\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\7\31\1\244\22\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\1\245\31\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\32\31\2\0\1\246\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\14\31"+
    "\1\247\15\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\6\31"+
    "\1\250\23\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\10\31"+
    "\1\251\21\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\32\31"+
    "\2\0\1\252\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\24\31\1\253\5\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\23\31\1\254\6\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\10\31\1\255\21\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\10\31\1\256\21\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\1\31\1\257\30\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\25\31\1\260\4\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\10\31\1\261\21\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\1\262\31\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\22\31\1\263\7\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\10\31\1\264\21\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\24\31\1\265\5\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\4\31\1\266\25\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\1\267\31\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\23\31\1\270\6\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\24\31\1\271\5\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\1\272\31\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\21\31\1\273\10\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\7\17\31\1\274\1\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\7\14\31\1\275\4\31"+
    "\17\0\1\57\1\0\5\217\66\0\1\56\2\0\1\7"+
    "\5\0\1\276\1\57\1\0\5\16\3\0\32\7\2\0"+
    "\22\7\67\0\1\277\24\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\6\31\1\300\23\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\4\31\1\301\25\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\32\31\2\0\1\302"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\15\31\1\303\14\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\16\31\1\304\13\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\21\31\1\305\10\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\12\31\1\306\17\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\4\31\1\307\25\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\14\31\1\310\15\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\16\31\1\311\13\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\24\31\1\312\5\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\21\31\1\313\10\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\4\31\1\314\25\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\2\31\1\315\27\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\10\31\1\316\21\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\1\317\31\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\320\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\22\31\1\321\7\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\22\7\1\322\7\7\2\0\17\7\1\322\2\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\24\31\1\323\5\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\324\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\2\31\1\325\27\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\22\7\1\326\7\7\2\0\17\7\1\326\2\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\10\31\1\327\21\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\10\31\1\330\21\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\15\31\1\331\14\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\5\31\1\332\24\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\21\31\1\333\10\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\16\31\1\334\13\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\16\31\1\335\13\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\14\31\1\336\15\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\26\31\1\337\3\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\16\31\1\340\13\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\341\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\2\31\1\342\27\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\16\31\1\343\13\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\13\31\1\344\16\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\21\31\1\345\10\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\346\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\7\3\31\1\347\15\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\7\16\31\1\350\2\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\1\351"+
    "\1\352\3\7\3\0\32\7\2\0\22\7\101\0\1\353"+
    "\12\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\1\354\31\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\1\355\31\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\23\7"+
    "\1\356\6\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\32\31\2\0"+
    "\1\357\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\16\31\1\360\13\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\1\31\1\361\30\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\15\31\1\362\14\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\13\31\1\363\16\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\32\31\2\0\1\364\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\15\31\1\365\14\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\7\31\1\366\22\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\15\31\1\367\14\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\370\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\21\31\1\371\10\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\16\7"+
    "\1\372\13\7\2\0\14\7\1\372\5\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\13\31\1\373\16\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\15\31\1\374\14\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\4\31\1\375\25\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\16\7"+
    "\1\376\13\7\2\0\14\7\1\376\5\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\4\31\1\377\25\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\5\31\1\u0100\24\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\32\31\2\0\1\u0101\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\10\31\1\u0102"+
    "\21\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\4\31\1\u0103"+
    "\25\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\32\31\2\0"+
    "\1\u0104\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\15\31\1\u0105\14\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\4\31\1\u0106\25\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\16\31\1\u0107\13\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\21\31\1\u0108\10\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\23\31\1\u0109\6\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\32\31\2\0\1\u010a\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\16\31\1\u010b\13\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\10\31\1\u010c\21\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\1\u010d\2\0\32\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\1\7\4\u010e"+
    "\3\0\32\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\3\u010e\2\7\3\0\32\7\2\0"+
    "\22\7\77\0\1\u010f\14\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\21\31\1\u0110\10\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\2\31\1\u0111\27\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\4\7\1\u0112\25\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\23\7\1\u0113\6\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\16\31\1\u0114\13\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\1\u0115\31\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\23\31\1\u0116\6\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\24\7"+
    "\1\u0117\5\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\2\31\1\u0118"+
    "\27\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\1\u0119\31\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\1\u011a\31\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\2\7\1\u011b\11\7\1\u011c\15\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\16\31\1\u011d\13\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\13\7\1\u011e\16\7\2\0\11\7"+
    "\1\u011e\10\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\1\u011f\31\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\13\7\1\u0120\16\7\2\0\11\7\1\u0120"+
    "\10\7\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\21\31\1\u0121\10\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\10\31\1\u0122\21\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\24\7\1\u0123\5\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\2\31\1\u0124\27\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\32\31\2\0\1\u0125\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\5\7\1\u0126"+
    "\11\7\1\u0127\12\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\4\31"+
    "\1\u0128\25\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\23\31"+
    "\1\u0129\6\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\21\31"+
    "\1\u012a\10\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\10\31"+
    "\1\u012b\21\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\25\7\1\u012c"+
    "\4\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\16\31\1\u012d\13\31"+
    "\2\0\1\7\21\31\20\0\1\u012e\73\0\1\56\2\0"+
    "\1\7\5\0\1\u012f\2\0\5\7\3\0\32\7\2\0"+
    "\22\7\20\0\1\u0130\73\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\32\31\2\0\1\u0131"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\10\31\1\u0132\21\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\27\7\1\u0133\2\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\4\7\1\u0134\25\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\27\31"+
    "\1\u0135\2\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\22\31"+
    "\1\u0136\7\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\1\u0137"+
    "\31\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\22\7\1\u0138\7\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\10\31\1\u0139\21\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\21\31\1\u013a\10\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\21\7\1\u013b\10\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\16\7\1\u013c\13\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\10\7"+
    "\1\u013d\21\7\2\0\7\7\1\u013d\12\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\21\31\1\u013e\10\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\10\7"+
    "\1\u013f\21\7\2\0\7\7\1\u013f\12\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\3\31\1\u0140\26\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\2\31\1\u0141\27\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\22\7"+
    "\1\u0142\7\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\1\u0143\31\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\2\7\1\u0144\27\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\16\7\1\u0145\13\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\1\u0146\31\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\22\31\1\u0147"+
    "\7\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\21\31\1\u0148"+
    "\10\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\3\31\1\u0149"+
    "\26\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\3\31\1\u014a"+
    "\26\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\10\7\1\u014b\21\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\32\31\2\0\1\u014c\21\31"+
    "\20\0\1\u014d\73\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\1\u014e\2\u014f\1\u0150\1\7\3\0\32\7\2\0"+
    "\22\7\10\0\1\u0130\5\0\1\u0130\1\0\6\u0130\3\0"+
    "\32\u0130\2\0\22\u0130\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\2\7\1\u0151\27\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\16\31\1\u0152\13\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\23\7\1\u0153\6\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\27\7\1\u0154\2\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\21\31"+
    "\1\u0155\1\u0156\7\31\2\0\1\7\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\24\7"+
    "\1\u0157\5\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\1\u0158\31\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\1\61\1\0\5\7\3\0\32\31\2\0\1\u0159"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\4\7\1\u015a\25\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\3\7\1\u015b\26\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\2\7\1\u015c"+
    "\27\7\2\0\2\7\1\u015c\17\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\10\31"+
    "\1\u015d\21\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\2\7\1\u015e"+
    "\27\7\2\0\2\7\1\u015e\17\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\1\u015f"+
    "\31\31\2\0\1\7\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\1\61\1\0\5\7\3\0\1\u0160\31\31"+
    "\2\0\1\7\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\24\7\1\u0161\5\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\21\31\1\u0162\10\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\1\u0163\31\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\21\7"+
    "\1\u0164\10\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\22\7\1\u0165\7\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\16\31\1\u0166\13\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\16\31\1\u0167\13\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\22\7\1\u0168\7\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\1\u0169\1\7\1\u016a\12\7\1\u016b\14\7\2\0"+
    "\22\7\31\0\32\u016c\3\0\21\u016c\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\1\7\4\u016d\3\0\32\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\u016d\3\0\32\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\2\u016d\3\7\3\0"+
    "\32\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\16\7\1\u016e\13\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\1\61"+
    "\1\0\5\7\3\0\15\31\1\u016f\14\31\2\0\1\7"+
    "\21\31\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\16\7\1\u0170\13\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\23\7\1\u0171\6\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\32\31"+
    "\2\0\1\u0172\21\31\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\1\u0173\31\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\13\31\1\u0174\16\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\2\7\1\u0175\2\7\1\u0176\16\7\1\u0177\5\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\1\u0178\31\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\10\7\1\u0179\21\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\10\7\1\u017a"+
    "\21\7\2\0\7\7\1\u017a\12\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\16\31"+
    "\1\u017b\13\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\10\7\1\u017c"+
    "\21\7\2\0\7\7\1\u017c\12\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\1\61\1\0\5\7\3\0\21\31"+
    "\1\u017d\10\31\2\0\1\7\21\31\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\1\u017e\31\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\32\31\2\0\1\u017f\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\14\7\1\u0180\15\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\14\7"+
    "\1\u0181\15\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\22\7\1\u0182\7\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\1\61\1\0\5\7\3\0\22\31\1\u0183\7\31\2\0"+
    "\1\7\21\31\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\10\7\1\u0184\21\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\15\7\1\u0185\14\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\21\7"+
    "\1\u0186\10\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\24\7\1\u0187\5\7"+
    "\2\0\22\7\17\0\1\61\11\0\32\u016c\3\0\21\u016c"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\14\7\1\u0188\15\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\16\7"+
    "\1\u0189\13\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\3\7\1\u018a\26\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\21\7\1\u018b\10\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\4\31\1\u018c\25\31\2\0\1\7\21\31"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\16\7\1\u018d\13\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\16\7"+
    "\1\u018e\13\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\22\7\1\u018f\7\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\2\7\1\u0190\27\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\5\7\1\u0191\24\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\23\7"+
    "\1\u0192\6\7\2\0\20\7\1\u0192\1\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\23\7"+
    "\1\u0193\6\7\2\0\20\7\1\u0193\1\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\21\7"+
    "\1\u0194\10\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\2\7\1\u0195\2\7"+
    "\1\u0196\16\7\1\u0197\5\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\17\7"+
    "\1\u0198\12\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\24\7\1\u0199\5\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\26\7\1\u019a\3\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\1\61\1\0"+
    "\5\7\3\0\32\31\2\0\1\u019b\21\31\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\1\7"+
    "\1\u019c\30\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\23\7\1\u019d\6\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\4\7\1\u019e\25\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\4\7\1\u019f\25\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\17\7"+
    "\1\u01a0\12\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\1\u01a1\31\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\10\7\1\u01a2\21\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\1\61\1\0\5\7"+
    "\3\0\22\31\1\u01a3\7\31\2\0\1\7\21\31\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\14\7\1\u01a4\15\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\21\7\1\u01a5"+
    "\10\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\24\7\1\u01a6\5\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\10\7\1\u01a7\21\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\10\7\1\u01a8\21\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\24\7\1\u01a9"+
    "\5\7\2\0\21\7\1\u01a9\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\24\7\1\u01aa\5\7"+
    "\2\0\21\7\1\u01aa\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\10\7\1\u01ab\21\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\16\7\1\u01ac\13\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\16\7\1\u01ad\13\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\22\7\1\u01ae"+
    "\7\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\16\7\1\u01af\13\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\13\7\1\u01b0\16\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\16\7\1\u01b1\13\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\2\7\1\u01b2"+
    "\2\7\1\u01b3\24\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\13\7\1\u01b4"+
    "\16\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\10\7\1\u01b5\21\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\1\u01b6\31\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\25\7"+
    "\1\u01b7\4\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\16\7\1\u01b8\13\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\23\7\1\u01b9\6\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\16\7\1\u01ba\13\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\1\61\1\0\5\7\3\0"+
    "\32\31\2\0\1\u01bb\21\31\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\17\7\1\u01bc\12\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\14\7\1\u01bd\15\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\1\u01be\31\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\16\7\1\u01bf"+
    "\13\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\2\7\1\u01c0\27\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\3\7\1\u01c1\26\7\2\0\3\7\1\u01c1"+
    "\16\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\3\7\1\u01c2\26\7\2\0\3\7\1\u01c2"+
    "\16\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\16\7\1\u01c3\13\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\14\7\1\u01c4\15\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\21\7\1\u01c5"+
    "\10\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\24\7\1\u01c6\5\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\1\u01c7\31\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\21\7"+
    "\1\u01c8\10\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\16\7\1\u01c9\13\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\16\7\1\u01ca\13\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\4\7\1\u01cb\25\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\6\7"+
    "\1\u01cc\23\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\2\7\1\u01cd\27\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\16\7\1\u01ce\13\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\15\7\1\u01cf\14\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\16\7"+
    "\1\u01d0\13\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\24\7\1\u01d1\5\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\16\7\1\u01d2\13\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\24\7\1\u01d3\5\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\21\7"+
    "\1\u01d4\10\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\15\7\1\u01d5\14\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\1\u01d6\31\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\4\7\1\u01d7\25\7\2\0\4\7\1\u01d7\15\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\4\7\1\u01d8\25\7\2\0\4\7\1\u01d8\15\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\17\7\1\u01d9\12\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\14\7\1\u01da"+
    "\15\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\1\u01db\31\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\21\7\1\u01dc\10\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\3\7"+
    "\1\u01dd\26\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\14\7\1\u01de\15\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\21\7\1\u01df\10\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\24\7\1\u01e0\5\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\10\7"+
    "\1\u01e1\21\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\4\7\1\u01e2\25\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\22\7\1\u01e3\7\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\22\7\1\u01e4\7\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\15\7"+
    "\1\u01e5\14\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\13\7\1\u01e6\16\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\10\7\1\u01e7\21\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\2\7\1\u01e8\27\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\22\7"+
    "\1\u01e9\7\7\2\0\17\7\1\u01e9\2\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\22\7"+
    "\1\u01ea\7\7\2\0\17\7\1\u01ea\2\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\16\7"+
    "\1\u01eb\13\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\24\7\1\u01ec\5\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\21\7\1\u01ed\10\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\10\7\1\u01ee\21\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\17\7"+
    "\1\u01ef\12\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\14\7\1\u01f0\15\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\16\7\1\u01f1\13\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\16\7\1\u01f2\13\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\15\7"+
    "\1\u01f3\14\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\24\7\1\u01f4\5\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\4\7\1\u01f5\25\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\1\u01f6\31\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\16\7\1\u01f7"+
    "\13\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\10\7\1\u01f8\21\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\15\7\1\u01f9\14\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\13\7\1\u01fa\16\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\10\7\1\u01fb"+
    "\21\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\16\7\1\u01fc\13\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\16\7\1\u01fd\13\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\24\7\1\u01fe\5\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\15\7\1\u01ff"+
    "\14\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\23\7\1\u0200\6\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\1\u0201\31\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\15\7"+
    "\1\u0202\14\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\21\7\1\u0203\10\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\16\7\1\u0204\13\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\4\7\1\u0205\25\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\1\u0206"+
    "\31\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\16\7\1\u0207\13\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\15\7\1\u0208\14\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\13\7\1\u0209\16\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\4\7\1\u020a"+
    "\25\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\21\7\1\u020b\10\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\23\7\1\u020c\6\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\10\7\1\u020d\21\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\15\7\1\u020e"+
    "\14\7\2\0\22\7\5\0\1\56\2\0\1\7\5\0"+
    "\1\7\2\0\5\7\3\0\15\7\1\u020f\14\7\2\0"+
    "\22\7\5\0\1\56\2\0\1\7\5\0\1\7\2\0"+
    "\5\7\3\0\21\7\1\u0210\10\7\2\0\22\7\5\0"+
    "\1\56\2\0\1\7\5\0\1\7\2\0\5\7\3\0"+
    "\4\7\1\u0211\25\7\2\0\22\7\5\0\1\56\2\0"+
    "\1\7\5\0\1\7\2\0\5\7\3\0\1\u0212\31\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\10\7\1\u0213\21\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\4\7\1\u0214\25\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\16\7"+
    "\1\u0215\13\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\23\7\1\u0216\6\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\10\7\1\u0217\21\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\15\7\1\u0218\14\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\21\7"+
    "\1\u0219\10\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\16\7\1\u021a\13\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\4\7\1\u021b\25\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\16\7\1\u021c\13\7\2\0\22\7\5\0\1\56"+
    "\2\0\1\7\5\0\1\7\2\0\5\7\3\0\23\7"+
    "\1\u021d\6\7\2\0\22\7\5\0\1\56\2\0\1\7"+
    "\5\0\1\7\2\0\5\7\3\0\10\7\1\u021e\21\7"+
    "\2\0\22\7\5\0\1\56\2\0\1\7\5\0\1\7"+
    "\2\0\5\7\3\0\4\7\1\u021f\25\7\2\0\22\7"+
    "\5\0\1\56\2\0\1\7\5\0\1\7\2\0\5\7"+
    "\3\0\16\7\1\u0220\13\7\2\0\22\7\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33299];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\4\11\3\1\3\11"+
    "\23\1\2\11\3\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\56\1\1\0\60\1\1\0\55\1\1\0"+
    "\53\1\1\0\41\1\1\0\1\1\1\0\36\1\1\0"+
    "\36\1\1\0\36\1\1\0\264\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[544];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	//parentesis ()
	//corchetes []
	//llaves{}
	    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
	ArrayList<ErrorLexico> lexico = new ArrayList<ErrorLexico>();


	public ArrayList<ErrorLexico> getLexicoERROR() {
        return lexico;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //ErrorLexico error = new ErrorLexico(yytext(),yyline+"",yycolumn+"");
	ErrorLexico error = new ErrorLexico();
	error.setToken(yytext());
	error.setLinea(yyline+"");
	error.setColumna(yycolumn+"");
	lexico.add(error);
	//lexico.add("Error tipo lexico "+yytext()+" linea: "+yyline);
	System.out.println("Error tipo lexico "+yytext());
            }
            // fall through
          case 90: break;
          case 2:
            { 
            }
            // fall through
          case 91: break;
          case 3:
            { return new Symbol(sym.Exclamation,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 92: break;
          case 4:
            { return new Symbol(sym.Comilla,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 93: break;
          case 5:
            { return new Symbol(sym.EXP_user_pass,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 94: break;
          case 6:
            { return new Symbol(sym.Allids,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 95: break;
          case 7:
            { return new Symbol(sym.Apostrofe,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 96: break;
          case 8:
            { return new Symbol(sym.Parentesis_L,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 97: break;
          case 9:
            { return new Symbol(sym.Parentesis_R,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 98: break;
          case 10:
            { return new Symbol(sym.Coma,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 99: break;
          case 11:
            { return new Symbol(sym.DosP,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 100: break;
          case 12:
            { return new Symbol(sym.DipleL,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 101: break;
          case 13:
            { return new Symbol(sym.DipleR,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 102: break;
          case 14:
            { return new Symbol(sym.Corchete_L,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 103: break;
          case 15:
            { return new Symbol(sym.Corchete_R,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 104: break;
          case 16:
            { return new Symbol(sym.Llave_L,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 105: break;
          case 17:
            { return new Symbol(sym.Separador,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 106: break;
          case 18:
            { return new Symbol(sym.Llave_R,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 107: break;
          case 19:
            { return new Symbol(sym.Textos,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 108: break;
          case 20:
            { return new Symbol(sym.ID,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 109: break;
          case 21:
            { return new Symbol(sym.No,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 110: break;
          case 22:
            { return new Symbol(sym.Or,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 23:
            { return new Symbol(sym.Si,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 112: break;
          case 24:
            { return new Symbol(sym.To,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 25:
            { return new Symbol(sym.Numeros,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 114: break;
          case 26:
            { return new Symbol(sym.And,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 27:
            { return new Symbol(sym.Not,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 28:
            { return new Symbol(sym.Url,yyline+1, yycolumn+1, yytext() );
            }
            // fall through
          case 117: break;
          case 29:
            { return new Symbol(sym.TBlue,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 118: break;
          case 30:
            { return new Symbol(sym.TDark,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 119: break;
          case 31:
            { return new Symbol(sym.Form,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 32:
            { return new Symbol(sym.TemaForm,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 121: break;
          case 33:
            { return new Symbol(sym.Boton,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 122: break;
          case 34:
            { return new Symbol(sym.Clase,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 123: break;
          case 35:
            { return new Symbol(sym.Combo,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 124: break;
          case 36:
            { return new Symbol(sym.Filas,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 125: break;
          case 37:
            { return new Symbol(sym.Radio,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 126: break;
          case 38:
            { return new Symbol(sym.Where,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 39:
            { return new Symbol(sym.TWhite,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 128: break;
          case 40:
            { return new Symbol(sym.Centro,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 129: break;
          case 41:
            { return new Symbol(sym.Imagen,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 130: break;
          case 42:
            { return new Symbol(sym.Indice,yyline+1, yycolumn+1,yytext() );
            }
            // fall through
          case 131: break;
          case 43:
            { return new Symbol(sym.NombreForm,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 132: break;
          case 44:
            { return new Symbol(sym.Select,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 45:
            { return new Symbol(sym.TituloForm,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 134: break;
          case 46:
            { return new Symbol(sym.Derecha,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 135: break;
          case 47:
            { return new Symbol(sym.Fichero,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 136: break;
          case 48:
            { return new Symbol(sym.Usuario,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 137: break;
          case 49:
            { return new Symbol(sym.DirURL,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 138: break;
          case 50:
            { return new Symbol(sym.Checkbox,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 139: break;
          case 51:
            { return new Symbol(sym.Columnas,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 140: break;
          case 52:
            { return new Symbol(sym.Consulta,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 53:
            { return new Symbol(sym.Opciones,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 142: break;
          case 54:
            { return new Symbol(sym.Password,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 143: break;
          case 55:
            { return new Symbol(sym.Consultas,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 56:
            { return new Symbol(sym.Izquierda,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 145: break;
          case 57:
            { return new Symbol(sym.Requerido,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 146: break;
          case 58:
            { return new Symbol(sym.FechaF,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 59:
            { return new Symbol(sym.Alineacion,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 148: break;
          case 60:
            { return new Symbol(sym.AreaTexto,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 149: break;
          case 61:
            { return new Symbol(sym.Formulario,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 150: break;
          case 62:
            { return new Symbol(sym.Justificar,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 151: break;
          case 63:
            { return new Symbol(sym.CampoTexto,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 152: break;
          case 64:
            { return new Symbol(sym.NombreCampo,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 65:
            { return new Symbol(sym.CrearUsuario,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 154: break;
          case 66:
            { return new Symbol(sym.FinSolicitud,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 155: break;
          case 67:
            { return new Symbol(sym.IniSolicitud,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 156: break;
          case 68:
            { return new Symbol(sym.Login,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 157: break;
          case 69:
            { return new Symbol(sym.TextoVisible,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 158: break;
          case 70:
            { return new Symbol(sym.UserNuevo,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 159: break;
          case 71:
            { return new Symbol(sym.FechaCreacion,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 160: break;
          case 72:
            { return new Symbol(sym.NuevoPassword,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 161: break;
          case 73:
            { return new Symbol(sym.ConsultaDatos,yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 74:
            { return new Symbol(sym.FinSolicitudes,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 163: break;
          case 75:
            { return new Symbol(sym.IniSolicitudes,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 164: break;
          case 76:
            { return new Symbol(sym.UserAntiguo,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 165: break;
          case 77:
            { return new Symbol(sym.EliminarUsuario,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 166: break;
          case 78:
            { return new Symbol(sym.NuevoFormulario,yyline+1,yycolumn+1,yytext());
            }
            // fall through
          case 167: break;
          case 79:
            { return new Symbol(sym.UserCreacion,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 168: break;
          case 80:
            { return new Symbol(sym.ModificarUser,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 169: break;
          case 81:
            { return new Symbol(sym.AgregarComponente,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 170: break;
          case 82:
            { return new Symbol(sym.FechaModif,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 171: break;
          case 83:
            { return new Symbol(sym.EliminarComponente,yyline+1, yycolumn+1,yytext() );
            }
            // fall through
          case 172: break;
          case 84:
            { return new Symbol(sym.EliminarForm,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 173: break;
          case 85:
            { return new Symbol(sym.CredencialUser,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 174: break;
          case 86:
            { return new Symbol(sym.ModificarComponente,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 175: break;
          case 87:
            { return new Symbol(sym.ModificarForm,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 176: break;
          case 88:
            { return new Symbol(sym.ParametrosComponente,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 177: break;
          case 89:
            { return new Symbol(sym.ParametroForm,yyline+1, yycolumn+1,yytext());
            }
            // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

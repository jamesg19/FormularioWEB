
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorDB;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import FormSolicitudIndigo.*;
import ComponentesIndigo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserDB extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parserDBSym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserDB() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserDB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserDB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\003\000\002\007" +
    "\010\000\002\010\062\000\002\011\013\000\002\011\011" +
    "\000\002\015\005\000\002\015\003\000\002\012\006\000" +
    "\002\014\005\000\002\014\004\000\002\013\011\000\002" +
    "\013\011\000\002\013\011\000\002\013\011\000\002\013" +
    "\011\000\002\013\011\000\002\013\011\000\002\013\011" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\013\011\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\016\003\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\116\005\001\002\000\004\002\254\001" +
    "\002\000\004\013\007\001\002\000\004\002\000\001\002" +
    "\000\004\017\010\001\002\000\004\024\012\001\002\000" +
    "\004\020\252\001\002\000\004\117\013\001\002\000\004" +
    "\024\014\001\002\000\004\022\015\001\002\000\004\024" +
    "\016\001\002\000\004\056\017\001\002\000\004\024\020" +
    "\001\002\000\004\023\021\001\002\000\004\024\022\001" +
    "\002\000\004\044\023\001\002\000\004\024\024\001\002" +
    "\000\004\022\025\001\002\000\004\024\026\001\002\000" +
    "\006\122\031\123\030\001\002\000\004\024\032\001\002" +
    "\000\004\024\uffd9\001\002\000\004\024\uffd8\001\002\000" +
    "\004\023\033\001\002\000\004\024\034\001\002\000\004" +
    "\045\035\001\002\000\004\024\036\001\002\000\004\022" +
    "\037\001\002\000\004\024\040\001\002\000\004\122\041" +
    "\001\002\000\004\024\042\001\002\000\004\023\043\001" +
    "\002\000\004\024\044\001\002\000\004\046\045\001\002" +
    "\000\004\024\046\001\002\000\004\022\047\001\002\000" +
    "\004\024\050\001\002\000\010\053\054\054\053\055\052" +
    "\001\002\000\004\024\055\001\002\000\004\024\uffda\001" +
    "\002\000\004\024\uffdb\001\002\000\004\024\uffdc\001\002" +
    "\000\004\023\056\001\002\000\004\024\057\001\002\000" +
    "\004\047\060\001\002\000\004\024\061\001\002\000\004" +
    "\022\062\001\002\000\004\024\063\001\002\000\006\122" +
    "\031\123\030\001\002\000\004\024\065\001\002\000\004" +
    "\023\066\001\002\000\004\024\067\001\002\000\004\050" +
    "\070\001\002\000\004\024\071\001\002\000\004\022\072" +
    "\001\002\000\004\024\073\001\002\000\004\040\074\001" +
    "\002\000\004\024\075\001\002\000\004\024\077\001\002" +
    "\000\004\020\ufffe\001\002\000\004\120\100\001\002\000" +
    "\004\024\101\001\002\000\004\022\102\001\002\000\004" +
    "\013\103\001\002\000\004\017\106\001\002\000\006\014" +
    "\ufffa\023\250\001\002\000\004\014\245\001\002\000\004" +
    "\024\110\001\002\000\004\023\237\001\002\000\032\043" +
    "\121\065\115\066\112\067\122\100\123\101\113\102\117" +
    "\107\116\112\120\113\114\114\124\115\111\001\002\000" +
    "\004\024\232\001\002\000\004\024\225\001\002\000\004" +
    "\024\220\001\002\000\004\024\213\001\002\000\004\024" +
    "\206\001\002\000\004\024\177\001\002\000\004\024\166" +
    "\001\002\000\004\024\161\001\002\000\004\024\154\001" +
    "\002\000\004\024\137\001\002\000\004\024\132\001\002" +
    "\000\004\024\125\001\002\000\004\022\126\001\002\000" +
    "\004\024\127\001\002\000\004\057\130\001\002\000\004" +
    "\024\131\001\002\000\006\020\uffec\023\uffec\001\002\000" +
    "\004\022\133\001\002\000\004\024\134\001\002\000\004" +
    "\057\135\001\002\000\004\024\136\001\002\000\006\020" +
    "\ufff0\023\ufff0\001\002\000\004\022\140\001\002\000\004" +
    "\024\141\001\002\000\022\070\151\071\145\072\144\073" +
    "\147\074\150\075\143\076\152\077\142\001\002\000\004" +
    "\024\uffe3\001\002\000\004\024\uffe5\001\002\000\004\024" +
    "\uffe8\001\002\000\004\024\uffe9\001\002\000\004\024\153" +
    "\001\002\000\004\024\uffe7\001\002\000\004\024\uffe6\001" +
    "\002\000\004\024\uffea\001\002\000\004\024\uffe4\001\002" +
    "\000\006\020\ufff3\023\ufff3\001\002\000\004\022\155\001" +
    "\002\000\004\024\156\001\002\000\004\056\157\001\002" +
    "\000\004\024\160\001\002\000\006\020\ufff6\023\ufff6\001" +
    "\002\000\004\022\162\001\002\000\004\024\163\001\002" +
    "\000\006\122\031\123\030\001\002\000\004\024\165\001" +
    "\002\000\006\020\uffee\023\uffee\001\002\000\004\022\167" +
    "\001\002\000\004\024\170\001\002\000\012\103\173\104" +
    "\174\105\172\106\175\001\002\000\004\024\176\001\002" +
    "\000\004\024\uffde\001\002\000\004\024\uffe0\001\002\000" +
    "\004\024\uffdf\001\002\000\004\024\uffdd\001\002\000\006" +
    "\020\ufff1\023\ufff1\001\002\000\004\022\200\001\002\000" +
    "\004\024\201\001\002\000\006\110\203\111\202\001\002" +
    "\000\004\024\uffe1\001\002\000\004\024\uffe2\001\002\000" +
    "\004\024\205\001\002\000\006\020\uffef\023\uffef\001\002" +
    "\000\004\022\207\001\002\000\004\024\210\001\002\000" +
    "\004\122\211\001\002\000\004\024\212\001\002\000\006" +
    "\020\ufff5\023\ufff5\001\002\000\004\022\214\001\002\000" +
    "\004\024\215\001\002\000\004\057\216\001\002\000\004" +
    "\024\217\001\002\000\006\020\uffed\023\uffed\001\002\000" +
    "\004\022\221\001\002\000\004\024\222\001\002\000\006" +
    "\122\031\123\030\001\002\000\004\024\224\001\002\000" +
    "\006\020\ufff2\023\ufff2\001\002\000\004\022\226\001\002" +
    "\000\004\024\227\001\002\000\004\056\230\001\002\000" +
    "\004\024\231\001\002\000\006\020\ufff4\023\ufff4\001\002" +
    "\000\004\022\233\001\002\000\004\024\234\001\002\000" +
    "\004\124\235\001\002\000\004\024\236\001\002\000\006" +
    "\020\uffeb\023\uffeb\001\002\000\004\024\110\001\002\000" +
    "\006\020\243\023\242\001\002\000\006\014\ufff9\023\ufff9" +
    "\001\002\000\004\024\110\001\002\000\006\014\ufff7\023" +
    "\ufff7\001\002\000\006\014\ufff8\023\ufff8\001\002\000\006" +
    "\020\ufffc\023\246\001\002\000\004\121\247\001\002\000" +
    "\004\020\ufffd\001\002\000\004\017\106\001\002\000\004" +
    "\014\ufffb\001\002\000\004\014\253\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\006\002\003\007\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\103\015\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\237\014\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\237" +
    "\014\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\103\015\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserDB$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserDB$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserDB$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	
	Formulario formR= new Formulario();
	Componente compR= new Componente();
	ArrayList<Formulario> lstFormulario = new ArrayList<Formulario>();
	ArrayList<Componente>  lstComponente = new ArrayList<Componente>();

	//constructor
	private Symbol sym;
    int contCreaUser=0;
    public Symbol getS(){
        return this.sym;
    }
	public parserDB( LexerDB lex){
	 super(lex);
	}
	public void report_error(String message, Object info){
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	
	public void syntax_error(Symbol cur_token) {
        System.out.println(symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
    }
	protected int error_sync_size() {
        return 1;
    }
	public ArrayList<Formulario> getLstFormulario() {
        return lstFormulario;
    }
	public ArrayList<Componente> getLstComponente() {
        return lstComponente;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserDB$actions {
  private final parserDB parser;

  /** Constructor */
  CUP$parserDB$actions(parserDB parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserDB$do_action_part00000000(
    int                        CUP$parserDB$act_num,
    java_cup.runtime.lr_parser CUP$parserDB$parser,
    java.util.Stack            CUP$parserDB$stack,
    int                        CUP$parserDB$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserDB$result;

      /* select the action based on the action number */
      switch (CUP$parserDB$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTADO_INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		RESULT = start_val;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserDB$parser.done_parsing();
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ESTADO_INICIAL ::= DB_Form 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("ESTADO_INICIAL",0, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DB_Form ::= InicioGuardaForm Parentesis_L Llave_L BLOQUE_DB Llave_R Parentesis_R 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("DB_Form",5, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-5)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE_DB ::= Comilla IdFormulario Comilla DosP Comilla Allids Comilla Coma Comilla TituloForm Comilla DosP Comilla TEXTOS Comilla Coma Comilla NombreForm Comilla DosP Comilla EXP_user_pass Comilla Coma Comilla TemaForm Comilla DosP Comilla TEMAS Comilla Coma Comilla UserCreacion Comilla DosP Comilla TEXTOS Comilla Coma Comilla FechaCreacion Comilla DosP Comilla FechaF Comilla STRUCT 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-42)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-42)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-42)).value;
		int titleleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-34)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-34)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-34)).value;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-26)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-26)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-26)).value;
		int temleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-18)).left;
		int temright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-18)).right;
		Object tem = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-18)).value;
		int userleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-10)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-10)).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-10)).value;
		int fechleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)).left;
		int fechright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)).right;
		Object fech = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)).value;
		formR.setId(ids.toString()); 
	formR.setTitulo(title.toString()); 
	formR.setTema(tem.toString()); 
	formR.setNombre(nom.toString()); 
	formR.setUsuarioCreacion(user.toString()); 
	formR.setFechaCreacion(fech.toString());           
	lstFormulario.add(formR);
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_DB",6, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-47)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRUCT ::= Comilla Estructura Comilla DosP Parentesis_L BS_TEMP Parentesis_R Coma DatosRecopilados 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("STRUCT",7, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-8)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STRUCT ::= Comilla Estructura Comilla DosP Parentesis_L BS_TEMP Parentesis_R 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("STRUCT",7, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BS_TEMP ::= BLOQUE_STRUCT Coma BS_TEMP 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BS_TEMP",11, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BS_TEMP ::= BLOQUE_STRUCT 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BS_TEMP",11, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUE_STRUCT ::= Llave_L BLOQUE_STRUCT_2 Coma DB1 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT",8, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-3)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DB1 ::= BLOQUE_STRUCT_2 Coma DB1 
            {
              Object RESULT =null;

              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("DB1",10, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-2)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DB1 ::= BLOQUE_STRUCT_2 Llave_R 
            {
              Object RESULT =null;
		lstComponente.add(compR);  compR= new Componente();  
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("DB1",10, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQUE_STRUCT_2 ::= Comilla ID Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		 compR.setId(id.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_STRUCT_2 ::= Comilla NombreCampo Comilla DosP Comilla EXP_user_pass Comilla 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object nom = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setNombreCampo(nom.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_STRUCT_2 ::= Comilla Formulario Comilla DosP Comilla Allids Comilla 
            {
              Object RESULT =null;
		int idformleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int idformright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object idform = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setFormulario(idform.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_STRUCT_2 ::= Comilla Clase Comilla DosP Comilla CLASESCOMPONENTES Comilla 
            {
              Object RESULT =null;
		int cComleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int cComright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object cCom = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setClase(cCom.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_STRUCT_2 ::= Comilla TextoVisible Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int txttsleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int txttsright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object txtts = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setTextoVisible(txtts.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_STRUCT_2 ::= Comilla Alineacion Comilla DosP Comilla ALINEACIONES Comilla 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setAlineacion(ali.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_STRUCT_2 ::= Comilla Indice Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int indileft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int indiright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object indi = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setIndice(Integer.parseInt(indi.toString().trim())); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE_STRUCT_2 ::= Comilla Requerido Comilla DosP Comilla REQUERIDO Comilla 
            {
              Object RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setRequerido(req.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE_STRUCT_2 ::= Comilla Opciones Comilla DosP Comilla TEXTOS Comilla 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setOpciones(tst.toString()); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE_STRUCT_2 ::= Comilla Filas Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int filleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int filright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object fil = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setFilas(Integer.parseInt(fil.toString().trim())); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_STRUCT_2 ::= Comilla Columnas Comilla DosP Comilla Numeros Comilla 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setColumnas(Integer.parseInt(col.toString().trim())); 
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE_STRUCT_2 ::= Comilla Url Comilla DosP Comilla DirURL Comilla 
            {
              Object RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.elementAt(CUP$parserDB$top-1)).value;
		compR.setUrl(rl.toString());
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("BLOQUE_STRUCT_2",9, ((java_cup.runtime.Symbol)CUP$parserDB$stack.elementAt(CUP$parserDB$top-6)), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CLASESCOMPONENTES ::= CampoTexto 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=c;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CLASESCOMPONENTES ::= AreaTexto 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=ar;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CLASESCOMPONENTES ::= Checkbox 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=ch;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CLASESCOMPONENTES ::= Radio 
            {
              Object RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object rd = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=rd;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CLASESCOMPONENTES ::= Fichero 
            {
              Object RESULT =null;
		int fchleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int fchright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object fch = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=fch;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CLASESCOMPONENTES ::= Imagen 
            {
              Object RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object img = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=img;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CLASESCOMPONENTES ::= Combo 
            {
              Object RESULT =null;
		int cmbleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int cmbright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object cmb = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=cmb;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CLASESCOMPONENTES ::= Boton 
            {
              Object RESULT =null;
		int btnleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int btnright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object btn = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		RESULT=btn;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("CLASESCOMPONENTES",2, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // REQUERIDO ::= Si 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=s;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("REQUERIDO",3, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // REQUERIDO ::= No 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=n;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("REQUERIDO",3, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ALINEACIONES ::= Centro 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=c;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",4, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ALINEACIONES ::= Izquierda 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=i;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",4, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ALINEACIONES ::= Derecha 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=d;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",4, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ALINEACIONES ::= Justificar 
            {
              Object RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object j = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=j;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("ALINEACIONES",4, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TEMAS ::= TDark 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=d;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("TEMAS",1, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TEMAS ::= TBlue 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=b;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("TEMAS",1, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TEMAS ::= TWhite 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=w;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("TEMAS",1, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTOS ::= Textos 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=t;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("TEXTOS",12, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTOS ::= EXP_user_pass 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parserDB$stack.peek()).value;
		 RESULT=w;
              CUP$parserDB$result = parser.getSymbolFactory().newSymbol("TEXTOS",12, ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserDB$stack.peek()), RESULT);
            }
          return CUP$parserDB$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserDB$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserDB$do_action(
    int                        CUP$parserDB$act_num,
    java_cup.runtime.lr_parser CUP$parserDB$parser,
    java.util.Stack            CUP$parserDB$stack,
    int                        CUP$parserDB$top)
    throws java.lang.Exception
    {
              return CUP$parserDB$do_action_part00000000(
                               CUP$parserDB$act_num,
                               CUP$parserDB$parser,
                               CUP$parserDB$stack,
                               CUP$parserDB$top);
    }
}

}

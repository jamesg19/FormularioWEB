
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorLogin;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import UsuarioIndigo.*;
import FormSolicitudIndigo.*;
import ComponentesIndigo.*;
import GestorIndigo.*;
import Analizadores.sym;
import java.util.ArrayList;
import Analizadores.LexerCup;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserLogin extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserLogin() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserLogin(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserLogin(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\015\000\002\013\022\000\002\013\022" +
    "\000\002\005\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\004\006\001\002\000\004\002\075\001" +
    "\002\000\004\002\000\001\002\000\004\006\007\001\002" +
    "\000\004\011\010\001\002\000\004\022\011\001\002\000" +
    "\004\024\012\001\002\000\004\036\014\001\002\000\004" +
    "\016\067\001\002\000\004\024\015\001\002\000\004\005" +
    "\016\001\002\000\004\017\017\001\002\000\004\024\020" +
    "\001\002\000\004\025\021\001\002\000\004\024\022\001" +
    "\002\000\004\022\023\001\002\000\004\015\024\001\002" +
    "\000\004\017\025\001\002\000\004\024\026\001\002\000" +
    "\006\027\030\030\031\001\002\000\004\016\ufffe\001\002" +
    "\000\004\024\050\001\002\000\004\024\032\001\002\000" +
    "\004\022\033\001\002\000\004\024\034\001\002\000\004" +
    "\117\035\001\002\000\004\024\036\001\002\000\004\023" +
    "\037\001\002\000\004\024\040\001\002\000\004\027\041" +
    "\001\002\000\004\024\042\001\002\000\004\022\043\001" +
    "\002\000\004\024\044\001\002\000\004\117\045\001\002" +
    "\000\004\024\046\001\002\000\004\020\047\001\002\000" +
    "\004\016\ufffc\001\002\000\004\022\051\001\002\000\004" +
    "\024\052\001\002\000\004\117\053\001\002\000\004\024" +
    "\054\001\002\000\004\023\055\001\002\000\004\024\056" +
    "\001\002\000\004\030\057\001\002\000\004\024\060\001" +
    "\002\000\004\022\061\001\002\000\004\024\062\001\002" +
    "\000\004\117\063\001\002\000\004\024\064\001\002\000" +
    "\004\020\065\001\002\000\004\016\ufffd\001\002\000\004" +
    "\002\uffff\001\002\000\004\020\070\001\002\000\004\004" +
    "\071\001\002\000\004\012\072\001\002\000\004\006\073" +
    "\001\002\000\004\005\074\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\012\001" +
    "\001\000\004\005\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserLogin$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserLogin$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserLogin$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	
	
	ArrayList<ErrorSintactico> sintactico = new ArrayList<ErrorSintactico>();
	private Symbol sym;
    int contCreaUser=0;
	public LoginUsuario objLogin= new LoginUsuario();

	
    public Symbol getS(){
        return this.sym;
    }
	public parserLogin( LexerCup lex){
	 super(lex);
	}
	public void report_error(String message, Object info){ 
		System.out.println("\nREPORT ERROR");
	}
	public void report_fatal_error(String message, Object info){
		System.out.println("\nREPORT FATAL");
	}
	
	public void syntax_error(Symbol cur_token) {
		//ErrorSintactico errorr= new ErrorSintactico(symbl_name_from_id(expected_token_ids().get(0))+"",cur_token.value+"",cur_token.left+"",cur_token.right+"");
		ErrorSintactico errorr= new ErrorSintactico();
		errorr.setTokenEsperado(symbl_name_from_id(expected_token_ids().get(0))+"");
		errorr.setLinea(cur_token.value+"");
		errorr.setColumna(cur_token.left+"");
		errorr.setValor(cur_token.right+"");

        sintactico.add(errorr);
		System.out.println("...SE ESPERABA: "+symbl_name_from_id(expected_token_ids().get(0)));
        System.out.println("syntaxerr: " + symbl_name_from_id(cur_token.sym) +" Columna: "+cur_token.right+" Linea: "+cur_token.left+" Valor:"+cur_token.value);
    }
	protected int error_sync_size() {
        return 1;
    }

	public LoginUsuario getLogin() {
        return objLogin;
    }
	public ArrayList<ErrorSintactico> getSintacticoERROR() {
        return sintactico;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserLogin$actions {
  private final parserLogin parser;

  /** Constructor */
  CUP$parserLogin$actions(parserLogin parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserLogin$do_action_part00000000(
    int                        CUP$parserLogin$act_num,
    java_cup.runtime.lr_parser CUP$parserLogin$parser,
    java.util.Stack            CUP$parserLogin$stack,
    int                        CUP$parserLogin$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserLogin$result;

      /* select the action based on the action number */
      switch (CUP$parserLogin$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ESTADO_INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-1)).value;
		RESULT = start_val;
              CUP$parserLogin$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-1)), ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserLogin$parser.done_parsing();
          return CUP$parserLogin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ESTADO_INICIAL ::= SOLICITUD 
            {
              Object RESULT =null;

              CUP$parserLogin$result = parser.getSymbolFactory().newSymbol("ESTADO_INICIAL",0, ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), RESULT);
            }
          return CUP$parserLogin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SOLICITUD ::= DipleL Exclamation IniSolicitud DosP Comilla TIPO_SOLICITUD END_SOLICITUD 
            {
              Object RESULT =null;

              CUP$parserLogin$result = parser.getSymbolFactory().newSymbol("SOLICITUD",1, ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-6)), ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), RESULT);
            }
          return CUP$parserLogin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPO_SOLICITUD ::= Login Comilla DipleR Llave_L Comilla CredencialUser Comilla DosP Corchete_L Llave_L BLOQUE_LOGIN_USER2 
            {
              Object RESULT =null;

              CUP$parserLogin$result = parser.getSymbolFactory().newSymbol("TIPO_SOLICITUD",2, ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-10)), ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), RESULT);
            }
          return CUP$parserLogin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE_LOGIN_USER2 ::= Comilla Usuario Comilla DosP Comilla EXP_user_pass Comilla Coma Comilla Password Comilla DosP Comilla EXP_user_pass Comilla Llave_R 
            {
              Object RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-10)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-10)).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-10)).value;
		int passleft = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-2)).left;
		int passright = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-2)).right;
		Object pass = (Object)((java_cup.runtime.Symbol) CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-2)).value;
		  objLogin.setUsuario(user.toString()); objLogin.setPassword(pass.toString());  
              CUP$parserLogin$result = parser.getSymbolFactory().newSymbol("BLOQUE_LOGIN_USER2",9, ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-15)), ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), RESULT);
            }
          return CUP$parserLogin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE_LOGIN_USER2 ::= Comilla Password Comilla DosP Comilla EXP_user_pass Comilla Coma Comilla Usuario Comilla DosP Comilla EXP_user_pass Comilla Llave_R 
            {
              Object RESULT =null;
		int passleft = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-10)).left;
		int passright = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-10)).right;
		Object pass = (Object)((java_cup.runtime.Symbol) CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-10)).value;
		int userleft = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-2)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-2)).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-2)).value;
		  objLogin.setUsuario(user.toString()); objLogin.setPassword(pass.toString());  
              CUP$parserLogin$result = parser.getSymbolFactory().newSymbol("BLOQUE_LOGIN_USER2",9, ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-15)), ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), RESULT);
            }
          return CUP$parserLogin$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // END_SOLICITUD ::= Corchete_R Llave_R DipleL FinSolicitud Exclamation DipleR 
            {
              Object RESULT =null;

              CUP$parserLogin$result = parser.getSymbolFactory().newSymbol("END_SOLICITUD",3, ((java_cup.runtime.Symbol)CUP$parserLogin$stack.elementAt(CUP$parserLogin$top-5)), ((java_cup.runtime.Symbol)CUP$parserLogin$stack.peek()), RESULT);
            }
          return CUP$parserLogin$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserLogin$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserLogin$do_action(
    int                        CUP$parserLogin$act_num,
    java_cup.runtime.lr_parser CUP$parserLogin$parser,
    java.util.Stack            CUP$parserLogin$stack,
    int                        CUP$parserLogin$top)
    throws java.lang.Exception
    {
              return CUP$parserLogin$do_action_part00000000(
                               CUP$parserLogin$act_num,
                               CUP$parserLogin$parser,
                               CUP$parserLogin$stack,
                               CUP$parserLogin$top);
    }
}

}
